namespace ABM.Analytics.UnitTests
{
    using System;
    using System.Collections.Generic;

    using ABM.Model;

    public class CashFlowTestData
    {
        public string excelDataString = @"
42070	22500	0
42254	22500	0
42436	22500	0
42620	22500	0
42801	22500	0
42985	22500	0
43166	22500	0
43350	22500	0
43531	22500	0
43715	22500	0
43897	22500	0
44081	22500	0
44262	22500	0
44446	22500	0
44627	22500	0
44811	22500	0
44992	22500	0
45176	22500	0
45358	22500	0
45542	22500	0
45723	22500	0
45907	22500	0
46088	22500	0
46272	22500	0
46453	22500	0
46637	22500	0
46819	22500	0
47003	22500	0
47184	22500	0
47368	22500	0
47549	22500	0
47733	22500	0
47914	22500	0
48098	22500	0
48280	22500	0
48464	22500	0
48645	22500	0
48829	22500	0
49010	22500	0
49194	22500	1000000
";

        public List<CashFlow> CashFlows = new List<CashFlow>(100);

        public CashFlowTestData()
        {

        }

        protected virtual string ExcelDataString()
        {
            return string.Empty;
        }

        public virtual double ExpectedNPV()
        {
            return 0;
        }

        public void Create()
        {
            this.CashFlows.Clear();

            var cashFlowStringLine = this.ExcelDataString().Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var s in cashFlowStringLine)
            {
                var cashFlowElts = s.Split('	');
                double date = double.Parse(cashFlowElts[0]);
                double amount = double.Parse(cashFlowElts[1]);
                double premium = double.Parse(cashFlowElts[2]);

                this.CashFlows.Add(new CashFlow { Date = date, Amount = amount, Principle = premium });
            }            
        }
    }

    public class UKT_2_75_22_01_2015_CashFlows : CashFlowTestData
    {
        protected override string ExcelDataString()
        {
            return @"
42026	13750	1000000
";
        }

        public override double ExpectedNPV()
        {
            return (double)1018923.3499529;
        }
    }

    public class UKT_3_5_22_07_2068_CashFlows : CashFlowTestData
    {
        protected override string ExcelDataString()
        {
            return @"
42026	17500	0
42207	17500	0
42391	17500	0
42573	17500	0
42757	17500	0
42938	17500	0
43122	17500	0
43303	17500	0
43487	17500	0
43668	17500	0
43852	17500	0
44034	17500	0
44218	17500	0
44399	17500	0
44583	17500	0
44764	17500	0
44948	17500	0
45129	17500	0
45313	17500	0
45495	17500	0
45679	17500	0
45860	17500	0
46044	17500	0
46225	17500	0
46409	17500	0
46590	17500	0
46774	17500	0
46956	17500	0
47140	17500	0
47321	17500	0
47505	17500	0
47686	17500	0
47870	17500	0
48051	17500	0
48235	17500	0
48417	17500	0
48601	17500	0
48782	17500	0
48966	17500	0
49147	17500	0
49331	17500	0
49512	17500	0
49696	17500	0
49878	17500	0
50062	17500	0
50243	17500	0
50427	17500	0
50608	17500	0
50792	17500	0
50973	17500	0
51157	17500	0
51339	17500	0
51523	17500	0
51704	17500	0
51888	17500	0
52069	17500	0
52253	17500	0
52434	17500	0
52618	17500	0
52800	17500	0
52984	17500	0
53165	17500	0
53349	17500	0
53530	17500	0
53714	17500	0
53895	17500	0
54079	17500	0
54261	17500	0
54445	17500	0
54626	17500	0
54810	17500	0
54991	17500	0
55175	17500	0
55356	17500	0
55540	17500	0
55722	17500	0
55906	17500	0
56087	17500	0
56271	17500	0
56452	17500	0
56636	17500	0
56817	17500	0
57001	17500	0
57183	17500	0
57367	17500	0
57548	17500	0
57732	17500	0
57913	17500	0
58097	17500	0
58278	17500	0
58462	17500	0
58644	17500	0
58828	17500	0
59009	17500	0
59193	17500	0
59374	17500	0
59558	17500	0
59739	17500	0
59923	17500	0
60105	17500	0
60289	17500	0
60470	17500	0
60654	17500	0
60835	17500	0
61019	17500	0
61200	17500	0
61384	17500	0
61566	17500	1000000
";
        }

        public override double ExpectedNPV()
        {
            return (double)1141991.4652941;
        }        
    }

    public class UKT_4_5_07_09_2034_CashFlows : CashFlowTestData
    {
        protected override string ExcelDataString()
        {
            return @"
42070	22500	0
42254	22500	0
42436	22500	0
42620	22500	0
42801	22500	0
42985	22500	0
43166	22500	0
43350	22500	0
43531	22500	0
43715	22500	0
43897	22500	0
44081	22500	0
44262	22500	0
44446	22500	0
44627	22500	0
44811	22500	0
44992	22500	0
45176	22500	0
45358	22500	0
45542	22500	0
45723	22500	0
45907	22500	0
46088	22500	0
46272	22500	0
46453	22500	0
46637	22500	0
46819	22500	0
47003	22500	0
47184	22500	0
47368	22500	0
47549	22500	0
47733	22500	0
47914	22500	0
48098	22500	0
48280	22500	0
48464	22500	0
48645	22500	0
48829	22500	0
49010	22500	0
49194	22500	1000000
";
        }

        public override double ExpectedNPV()
        {
            return (double)1268604.353;
        }
    }
}