<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bloomberglp.AppPortalApi</name>
    </assembly>
    <members>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject">
            <summary>
             Implements <c>IExtensibleDataObject</c> interface.
             All object that intend to support forward compatible data
             contracts have to inherit from this type.
            </summary>
            <remarks>
            	<para>It is not possible to inherit from any other implementation of this interface - API will refuse to serialize.</para>
            	<para>
            		<span class="highlight-comment">Round-tripping occurs when data passes from a new version to an old version </span>
            		<span class="highlight-comment">and
            back to the new version of a data contract. </span>
            		<span class="highlight-comment">Round-tripping guarantees that no data is lost. Enabling
            round-tripping makes </span>
            		<span class="highlight-comment">the type forward-compatible with any future changes supported by the data contract versioning
            model.</span>
            		<br/>
            	</para>
            	<para>
            		<span class="highlight-comment">To enable round-tripping for a particular type, the type must derive from the ExtensibleDataObject
            class. </span>
            		<span class="highlight-comment">The class contains one property, ExtensionData (returning the ExtensionDataObject
            type). </span>
            		<span class="highlight-comment">The property stores any data from future versions of the data contract that is unknown to the current
            version.</span>
            	</para>
            </remarks>
            <example>
            The following code shows an instance of a type (<span class="code">PersonVersion2</span>) that is the second version of a serializable type (<span class="code">Person</span>). The second version contains extra data (<span class="code">Id</span> field) that is not present in the first version.
            <code title="Storage and Retrieval of ExtensibleDataObjects" description="" lang="CS">
            // Inherit from the ExtensibleDataObject  
            // to store the extra data for future versions.
            [DataContract(Name = "Person", Namespace = "http://www.yourcomapny.com/employees")]
            class Person : ExtensibleDataObject
            {
                // ExtensibleDataObject cals implements,
                // the ExtensionData property. The property
                // holds data from future versions of the class for backward
                // compatibility.
                [DataMember]
                public string Name;
            }
             
            // The second version of the class adds a new field. The field's 
            // data is stored in the ExtensionDataObject field of
            // the first version (Person). You must also set the Name property 
            // of the DataContractAttribute to match the first version. 
            // If necessary, also set the Namespace property so that the 
            // name of the contracts is the same.
            [DataContract(Name = "Person", Namespace = "http://www.yourcomapny.com/employees")]
            class PersonVersion2 : ExtensibleDataObject
            {
                // Best practice: add an Order number to new members.
                [DataMember(Order = 2)]
                public int Id;
             
                [DataMember]
                public string Name;
            }
             
            [TestClass]
            public class ExtensibleDataObjectTest
            {
                // Round-tripping occurs when data passes from a new version to an old version 
                // and back to the new version of a data contract. 
                // Round-tripping guarantees that no data is lost. Enabling round-tripping makes 
                // the type forward-compatible with any future changes supported by the data contract versioning model.
                //
                // To enable round-tripping for a particular type, the type must derive from the ExtensibleDataObject class. 
                // The class contains one property, ExtensionData (returning the ExtensionDataObject type). 
                // The property stores any data from future versions of the data contract that is unknown to the current version. 
                [TestMethod]
                public void TestRoundTrippingCompatibility()
                {
                    // --- Application Version 2
                    // A new version of application saves extended version of
                    // the Person object (PersonVersion2 in this example)
                    // Both name and Id are saved.
                    var v2 = new PersonVersion2 {Name = "Name 2", Id = 1};
                    PersistenceService.DefaultContext.SaveData("1", v2);
             
                    // --- Application Version 1
                    // The older version of the application reads data saved 
                    // by newer version. Data has Id value but Person class does not.
                    var v1 = PersistenceService.DefaultContext.ReadObject&lt;Person&gt;("1");
                    Assert.IsTrue(v2.Name.Equals(v1.Name));
             
                    // Application changes Name's value and saves it. 
                    // It does not know that Id is saved along. 
                    // Serialization mechanism is aware of extra members 
                    // because the object is derived from ExtensibleDataObject, 
                    // that keeps all extra values
                    v1.Name = "Name 1";
                    PersistenceService.DefaultContext.SaveData("1", v1);
             
                    // --- Application Version 2
                    // New version of application reads data that originates 
                    // from version 2 object, read and modified by version 1
                    // and still retains all the data from version 2 (except modified 
                    // field that is known to old and new version)
                    var v21 = PersistenceService.DefaultContext.ReadObject&lt;PersonVersion2&gt;("1");
                    Assert.AreEqual(v2.Id, v21.Id);
                }
            }</code></example>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject.ExtensionData">
            <summary>CLR uses it to keep data that is not compatible with a target type.</summary>
            <value>The value used by CLR to keep data that is not compatible with a target type.</value>
        </member>
        <member name="T:Microsoft.Windows.Shell.HCF">
            <summary>
            HIGHCONTRAST flags
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.DROPIMAGETYPE">
            <summary>
            DROPIMAGE_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.BI">
            <summary>
            BITMAPINFOHEADER Compression type.  BI_*.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.RGN">
            <summary>
            CombingRgn flags.  RGN_*
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.RGN.AND">
            <summary>
            Creates the intersection of the two combined regions.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.RGN.OR">
            <summary>
            Creates the union of two combined regions.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.RGN.XOR">
            <summary>
            Creates the union of two combined regions except for any overlapping areas.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.RGN.DIFF">
            <summary>
            Combines the parts of hrgnSrc1 that are not part of hrgnSrc2.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.RGN.COPY">
            <summary>
            Creates a copy of the region identified by hrgnSrc1.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.OLECMDEXECOPT">
            <summary>
            For IWebBrowser2.  OLECMDEXECOPT_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.OLECMDF">
            <summary>
            For IWebBrowser2.  OLECMDF_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.OLECMDID">
            <summary>
            For IWebBrowser2.  OLECMDID_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.READYSTATE">
            <summary>
            For IWebBrowser2.  READYSTATE_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.DOGIF">
            <summary>
            DATAOBJ_GET_ITEM_FLAGS.  DOGIF_*.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.ErrorModes.Default">
            <summary>Use the system default, which is to display all error dialog boxes.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.ErrorModes.FailCriticalErrors">
            <summary>
            The system does not display the critical-error-handler message box. 
            Instead, the system sends the error to the calling process.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.ErrorModes.NoGpFaultErrorBox">
            <summary>
            64-bit Windows:  The system automatically fixes memory alignment faults and makes them 
            invisible to the application. It does this for the calling process and any descendant processes.
            After this value is set for a process, subsequent attempts to clear the value are ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.ErrorModes.NoAlignmentFaultExcept">
            <summary>
            The system does not display the general-protection-fault message box. 
            This flag should only be set by debugging applications that handle general 
            protection (GP) faults themselves with an exception handler.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.ErrorModes.NoOpenFileErrorBox">
            <summary>
            The system does not display a message box when it fails to find a file. 
            Instead, the error is returned to the calling process.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.HT">
            <summary>
            Non-client hit test values, HT*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.GCLP">
            <summary>
            GetClassLongPtr values, GCLP_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.GWL">
            <summary>
            GetWindowLongPtr values, GWL_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SM">
            <summary>
            SystemMetrics.  SM_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SPI">
            <summary>
            SystemParameterInfo values, SPI_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SPIF">
            <summary>
            SystemParameterInfo flag values, SPIF_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.CS">
            <summary>
            CS_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WS">
            <summary>
            WindowStyle values, WS_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WM">
            <summary>
            Window message values, WM_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WS_EX">
            <summary>
            Window style extended values, WS_EX_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.DeviceCap">
            <summary>
            GetDeviceCaps nIndex values.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.DeviceCap.BITSPIXEL">
            <summary>Number of bits per pixel.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.FOF">
            <summary>
            "FILEOP_FLAGS", FOF_*.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.MF">
            <summary>
            EnableMenuItem uEnable values, MF_*
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.MF.DOES_NOT_EXIST">
            <summary>
            Possible return value for EnableMenuItem
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WINDOWTHEMEATTRIBUTETYPE">
            <summary>Specifies the type of visual style attribute to set on a window.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WINDOWTHEMEATTRIBUTETYPE.WTA_NONCLIENT">
            <summary>Non-client area window attributes will be set.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.DWMFLIP3D">
            <summary>
            DWMFLIP3DWINDOWPOLICY.  DWMFLIP3D_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.DWMNCRP">
            <summary>
            DWMNCRENDERINGPOLICY. DWMNCRP_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.DWMWA">
            <summary>
            DWMWINDOWATTRIBUTE.  DWMWA_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WTNCA">
            <summary>
            WindowThemeNonClientAttributes
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTNCA.NODRAWCAPTION">
            <summary>Prevents the window caption from being drawn.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTNCA.NODRAWICON">
            <summary>Prevents the system icon from being drawn.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTNCA.NOSYSMENU">
            <summary>Prevents the system icon menu from appearing.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTNCA.NOMIRRORHELP">
            <summary>Prevents mirroring of the question mark, even in right-to-left (RTL) layout.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTNCA.VALIDBITS">
            <summary> A mask that contains all the valid bits.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SWP">
            <summary>
            SetWindowPos options
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SW">
            <summary>
            ShowWindow options
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SC.F_ISSECURE">
            <summary>
            SCF_ISSECURE
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.Status">
            <summary>
            GDI+ Status codes
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.MSGFLT">
            <summary>
            MSGFLT_*.  New in Vista.  Realiased in Windows 7.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.NIM">
            <summary>
            Shell_NotifyIcon messages.  NIM_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SHARD">
            <summary>
            SHAddToRecentDocuments flags.  SHARD_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.NIF">
            <summary>
            Shell_NotifyIcon flags.  NIF_*
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIF.REALTIME">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIF.SHOWTIP">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.NIIF">
            <summary>
            Shell_NotifyIcon info flags.  NIIF_*
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIIF.USER">
            <summary>XP SP2 and later.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIIF.NOSOUND">
            <summary>XP and later.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIIF.LARGE_ICON">
            <summary>Vista and later.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIIF.NIIF_RESPECT_QUIET_TIME">
            <summary>Windows 7 and later</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NIIF.XP_ICON_MASK">
            <summary>XP and later.  Native version called NIIF_ICON_MASK.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.AC">
            <summary>
            AC_*
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.NOTIFYICONDATA.dwState">
            <summary>
            The state of the icon.  There are two flags that can be set independently.
            NIS_HIDDEN = 1.  The icon is hidden.
            NIS_SHAREDICON = 2.  The icon is shared.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SHARDAPPIDINFOIDLIST.pidl">
            <summary>The idlist for the shell item that should be added to the recent docs folder.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SHARDAPPIDINFOIDLIST.pszAppID">
            <summary>The id of the application that should be associated with this recent doc.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WTA_OPTIONS">
            <summary>Defines options that are used to set window visual style attributes.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTA_OPTIONS.dwFlags">
            <summary>
            A combination of flags that modify window visual style attributes.
            Can be a combination of the WTNCA constants.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WTA_OPTIONS.dwMask">
            <summary>
            A bitmask that describes how the values specified in dwFlags should be applied.
            If the bit corresponding to a value in dwFlags is 0, that flag will be removed.
            If the bit is 1, the flag will be added.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.MARGINS.cxLeftWidth">
            <summary>Width of left border that retains its size.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.MARGINS.cxRightWidth">
            <summary>Width of right border that retains its size.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.MARGINS.cyTopHeight">
            <summary>Height of top border that retains its size.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.MARGINS.cyBottomHeight">
            <summary>Height of bottom border that retains its size.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.WndProc">
            <summary>Delegate declaration that matches native WndProc signatures.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.MessageHandler">
            <summary>Delegate declaration that matches managed WndProc signatures.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.NativeMethods.SetWindowThemeAttribute(System.IntPtr,Microsoft.Windows.Shell.WINDOWTHEMEATTRIBUTETYPE,Microsoft.Windows.Shell.WTA_OPTIONS@,System.UInt32)">
            <summary>
            Sets attributes to control how visual styles are applied to a specified window.
            </summary>
            <param name="hwnd">
            Handle to a window to apply changes to.
            </param>
            <param name="eAttribute">
            Value of type WINDOWTHEMEATTRIBUTETYPE that specifies the type of attribute to set.
            The value of this parameter determines the type of data that should be passed in the pvAttribute parameter.
            Can be the following value:
            <list>WTA_NONCLIENT (Specifies non-client related attributes).</list>
            pvAttribute must be a pointer of type WTA_OPTIONS.
            </param>
            <param name="pvAttribute">
            A pointer that specifies attributes to set. Type is determined by the value of the eAttribute value.
            </param>
            <param name="cbAttribute">
            Specifies the size, in bytes, of the data pointed to by pvAttribute.
            </param>
        </member>
        <member name="M:Microsoft.Windows.Shell.NativeMethods._SystemParametersInfo_NONCLIENTMETRICS(Microsoft.Windows.Shell.SPI,System.Int32,Microsoft.Windows.Shell.NONCLIENTMETRICS@,Microsoft.Windows.Shell.SPIF)">
            <summary>Overload of SystemParametersInfo for getting and setting NONCLIENTMETRICS.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.NativeMethods._SystemParametersInfo_HIGHCONTRAST(Microsoft.Windows.Shell.SPI,System.Int32,Microsoft.Windows.Shell.HIGHCONTRAST@,Microsoft.Windows.Shell.SPIF)">
            <summary>Overload of SystemParametersInfo for getting and setting HIGHCONTRAST.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.NativeMethods.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>
            Sets the User Model AppID for the current process, enabling Windows to retrieve this ID
            </summary>
            <param name="AppID"></param>
        </member>
        <member name="M:Microsoft.Windows.Shell.NativeMethods.GetCurrentProcessExplicitAppUserModelID(System.String@)">
            <summary>
            Retrieves the User Model AppID that has been explicitly set for the current process via SetCurrentProcessExplicitAppUserModelID
            </summary>
            <param name="AppID"></param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder">
            <summary>
            Provides a simple way to create and manage the contents of connection strings used by 
            the <see cref="T:System.Data.Common.DbConnection"/> class. 
            </summary>
            <remarks>
            The connection string builder lets developers programmatically create syntactically correct 
            connection strings using properties and methods of the class.
            
            The connection string builder provides strongly typed properties corresponding to the known key/value pairs allowed by the database. 
            Developers needing to create connection strings as part of applications can use the DbConnectionStringBuilder 
            class to build and modify connection strings. 
            </remarks>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.DefaultDatabaseName">
            <summary>
             Default database name,
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.ValidateConnectionString(System.String@)">
            <summary>
             Validates connection parameters.
            </summary>
             <param name="message">Error or warning message produced by validation</param>
             <remarks>
             <list type="bullet">
             <item><description>"Only the following parameters are allowed to be part of a connection string:
             "Data Source","Password", "Read Only", "FailIfMissing", "Version"
             <item><description>Data source value format: Only digits, _ and alpha characters are allowed for database file name.</description></item>
             </description></item>
             </list>
             </remarks>
            <returns>True when connection string is valid</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the DbConnectionStringBuilder class.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class using the specified connection string.
            </summary>
            <param name="connectionString">The connection string to parse</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Helper function for retrieving values from the connection string.
            </summary>
            <param name="keyword">The keyword to retrieve settings for</param>
            <param name="value">The resulting parameter value</param>
            <returns>Returns true if the value was found and returned</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.Version">
            <summary>
            Gets the version of the SQLite engine to instantiate.  
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.SyncMode">
            <summary>
            Gets/Sets the synchronization mode (file flushing) of the connection string.  The default is "Normal".
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.UseUtf16Encoding">
            <summary>
            Gets/Sets the encoding for the connection string.  The default is "False" which indicates UTF-8 encoding.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.Pooling">
            <summary>
            Gets/Sets whether or not to use connection pooling.  The default is "False"
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.BinaryGuid">
            <summary>
            Gets/Sets whether not to store GUID's in binary format.  The default is "True"
            which saves space in the database.
            </summary>
            <value></value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.DataSource">
            <summary>
            Gets/Sets the logical database name.
            Naming rules - anything that satisfies the following regular expression: ^\w+$
            </summary>
            <remarks>Data source value format: Only digits, _ and alpha characters are allowed for database file name</remarks>
            <value>Logical database name as <see cref="T:System.String"/></value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.Uri">
            <summary>
            An alternate to the data source property.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for 
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.Enlist">
            <summary>
            Determines whether or not the connection will automatically participate
            in the current distributed transaction (if one exists).
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.FailIfMissing">
            <summary>
            If set to "true" any tttempt to open a non existing database will throw an exception. 
            If set to "false," the database will be created automatically.
            </summary>
            <value><list type="bullet">
            <item><description>True - attempt to open non existing database will throw an exception</description></item>
            <item><description>False - attempt to open non existing database will create new database</description></item>
            </list>
            </value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.LegacyFormat">
            <summary>
            If enabled, uses the legacy 3.xx format for maximum compatibility, but results in larger
            database sizes.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.ReadOnly">
            <summary>
            When enabled, the database will be opened for read-only access and writing will be disabled.
            </summary>
            <value>True - database will be opened in read only mode</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.Password">
            <summary>
            Gets/sets the database encryption password.
            </summary>
            <value>Password to open encrypted database.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.PageSize">
            <summary>
            Gets/Sets the page size for the connection.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.MaxPageCount">
            <summary>
            Gets/Sets the maximum number of pages the database may hold.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.CacheSize">
            <summary>
            Gets/Sets the cache size for the connection.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.DateTimeFormat">
            
            <summary>
            Gets/Sets the DateTime format for the connection.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnectionStringBuilder.ForeignKeys">
            <summary>
            If enabled, use foreign key constraints
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbCommand">
            <summary>
            SQLite implementation of DbCommand.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.#ctor">
            <overloads>
             Constructs a new SQLiteCommand.
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.#ctor(Bloomberglp.AppPortalApi.Data.Sql.DbConnection)">
            <summary>
            Initializes the command and associates it with the specified connection.
            </summary>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.#ctor(System.String,Bloomberglp.AppPortalApi.Data.Sql.DbConnection,Bloomberglp.AppPortalApi.Data.Sql.DbTransaction)">
            <summary>
            Initializes a command with the given SQL, connection and transaction.
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
            <param name="transaction">The transaction the command should be associated with</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.CreateParameter">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Bloomberglp.AppPortalApi.Data.Sql.DbException"></exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Overrides the default behavior to return a SQLiteDataReader specialization class.
            </summary>
            <param name="behavior">The flags to be associated with the reader</param>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.ExecuteReader">
            <summary>
            Overrides the default behavior of DbDataReader to return a specialized SQLiteDataReader class.
            </summary>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.Connection">
            <summary>
            The connection associated with this command.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.Parameters">
            <summary>
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbCommand.Transaction">
            <summary>
            The transaction associated with this command.  SQLite only supports one transaction per connection, so this property forwards to the
            command's underlying connection.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.Request">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.Request.Item">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.GetData">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.GetData.EntryInfo">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.RootId">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.ScopeId">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.AppId">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.ProtocolVersion">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.PayloadVersion">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.ValidTillDt">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.ValidTillDtSpecified">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.ValidTill">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.EntryInfo.ValidTillSpecified">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.KeyExistsResponse">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.KeyExistsResponse.EntryInfo">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.KeyExistsResponse.Result">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.NotFound">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.Removed">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.Added">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.Replaced">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.Expired">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.Error">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.Found">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.REQUESTED_FOUND">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.REQUESTED_NOTFOUND">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.CHECKED_FOUND">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.CHECKED_NOTFOUND">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ResultCode.NONE">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.GetDataResponse">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.GetDataResponse.EntryInfo">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.GetDataResponse.Result">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.GetDataResponse.Payload">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.SaveDataResponse">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.SaveDataResponse.EntryInfo">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.SaveDataResponse.Result">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.RemoveDataResponse">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.RemoveDataResponse.EntryInfo">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.RemoveDataResponse.Result">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorInfoResponse">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorInfoResponse.ErrorCode">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorInfoResponse.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorCode">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorCode.SUCCESS">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorCode.EXCEPTION">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorCode.DBERROR">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorCode.NOTREADY">
            <remarks/>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.Remote.ErrorCode.TIMEOUT">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.KeyExists">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.KeyExists.EntryInfo">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.RemoveData">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.RemoveData.EntryInfo">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.SaveData">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.SaveData.EntryInfo">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.SaveData.Payload">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.Response">
            <remarks/>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.Remote.Response.Item">
            <remarks/>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ComponentProperties">
            <summary>
            Encapsulates the non security component properties collection.  
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.ComponentProperties.Contains(System.String)">
            <summary>
            Checks whether a component property name exists in the collection
            </summary>
            <param name="name">The component property name to be verified</param>
            <returns>Returns true is the component property exists in the collection, else returns false</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.ComponentProperties.Find(System.String)">
            <summary>
            Finds the component property by name
            </summary>
            <param name="name">The name of the security to be searched</param>
            <returns>Componet property if found in the list; otherwise, null.</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ComponentProperties.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified non security component.
            </summary>
            <returns>
            The value associated with the specified non security component. If the specified name is not found, a get operation throws a BlpAppPortalException, and a set operation creates a new element with the specified name.
            </returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ComponentProperties.Names">
            <summary>
            Returns names of non-security component properties 
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ComponentChangedEventArgs">
            <summary>
            Provides data for the ComponentChanged event. 
            EventType property of this class specifies the change type and EventData contains the data associated with event. 
            The subscriber shall type cast EventData to  relevant type based on the EventType value.  
            For example if EventType specifies "ComponentProperties", EventData property shall be type casted to ComponentProperties.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ComponentChangedEventArgs.EventType">
            <summary>
            Specifies the type of the event  
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ComponentChangedEventArgs.EventData">
            <summary>
            Contains the data associated with event.  The subscriber shall type cast to relevant object based on EventType
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpApplicationWindow">
            <summary>
            Encapsulates a Blp App Portal Application Window.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplicationWindow.SetCursor(System.String)">
            <summary>
            Set Main Window cursor to the one in the input file.
            Example:
            BlpApplication.Current.MainWindow.SetCursor(@"c:\Windows\Cursors\aero_unavail_xl.cur");
            BlpApplication.Current.MainWindow.SetCursor(@"c:\Windows\Cursors\aero_working.ani");
            </summary>
            <param name="fileName">Cursor file name (*.ani or *.cur)</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplicationWindow.SetCursor(System.Windows.Input.Cursor)">
            <summary>
            Set Main Window cursor to one of the default cursors
            Example:
            BlpApplication.Current.MainWindow.SetCursor(Cursors.Arrow);
            </summary>
            <param name="cursor">default cursor defined in System.Windows.Input.Cursors class</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplicationWindow.StartFlashing">
            <summary>
            Start flashing the application taskbar button. This method doesn't have any effect if the application window is activiated.
            One of these two things can make the flashing stop:
            1. the window becomes activated (comes to the foreground).
            2. StopFlashing is explicitly called.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplicationWindow.StopFlashing">
            <summary>
            Explicitly stops Windows flashing. This method doesn't have any effect if the application is not flashing.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpApplicationWindow.Title">
            <summary>
            gets or sets App Portal Application Title
            Example:
            var defaultTitle = BlpApplication.Current.MainWindow.Title;
            BlpApplication.Current.MainWindow.Title = "My Application";            
            BlpApplication.Current.MainWindow.Title = defaultTitle;            
            </summary>                
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpWindowsFormsHost">
            <summary>
            Safe Windows Forms host
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Tracer.BlpLogTraceListener">
            <summary>
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tracer.BlpLogTraceListener.#ctor(System.String)">
            <summary>
            </summary>
            <param name="applicationId"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tracer.BlpLogTraceListener.InitAppPortalTracing">
            <summary>
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.NamespaceDoc">
            <summary>
            The Bloomberglp.AppPortalApi.Desktop namespace contains types that expose printing, clipboard
            and external document viewing
            functionality to Bloomberg AppPortal applications.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog">
             <summary>
             A class that wraps methods and properties of <see cref="T:System.Windows.Controls.PrintDialog"/> class.
             </summary>
             <example>
             The following code shows how to print the passed window's contents.
             <code title="Generic PrintDialog Usage" description="" lang="CS">
             public static void DoPrintOn(Window window)
             {
                 var printDialog = new SafePrintDialog();
                 if (printDialog.ShowDialog() == true)
                 {
                     double dpi = 96;
                     double leftMargin = 1 * dpi;
                     double topMargin = 1 * dpi;
            
                     var renderTarget = new RenderTargetBitmap(
                         (int)window.RenderSize.Width, (int)window.RenderSize.Height,
                         dpi, dpi, PixelFormats.Default);
            
                     renderTarget.Render(window);
            
                     var drawingVisual = new DrawingVisual();
                     using (var drawingContext = drawingVisual.RenderOpen())
                     {
                         var rectangle = new Rect(
                             leftMargin, topMargin,
                             printDialog.PrintableAreaWidth - leftMargin * 2,
                             printDialog.PrintableAreaHeight - topMargin * 2);
            
                         drawingContext.DrawImage(renderTarget, rectangle);
                     }
                     printDialog.PrintVisual(drawingVisual, "SafePrintDialog Demo");
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.#ctor">
            <summary>
            Initializes a new instance of the SafePrintDialog class. 
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.ShowDialog">
             <summary>
             Invokes the <see cref="T:System.Windows.Controls.PrintDialog"/> as a modal dialog box.
             </summary>
             <returns>true if a user clicks <b>Print</b>; false if a user clicks <b>Cancel</b>; or null if a user closes
             the dialog box without clicking <b>Print</b> or <b>Cancel</b>.
            </returns>
             <remarks>
             For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
             </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PrintVisual(System.Windows.Media.Visual,System.String)">
            <summary>
            Prints a visual (non-text) object, which is derived from the <see cref="T:System.Windows.Media.Visual"/> class, to the printer that is currently selected.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual"/> to print.</param>
            <param name="description">A description of the job that is to be printed. This text appears in the user interface (UI) of the printer.</param>
            <exception cref="T:System.ArgumentNullException"><c>visual</c> is null.</exception>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PrintDocument(System.Windows.Documents.DocumentPaginator,System.String)">
            <summary>
            Prints a <see cref="T:System.Windows.Documents.DocumentPaginator"/> object to the printer that is currently selected.
            </summary>
            <param name="documentPaginator">The <see cref="T:System.Windows.Documents.DocumentPaginator"/> object to print.</param>
            <param name="description">A description of the job that is to be printed.
            This text appears in the user interface (UI) of the printer.</param>
            <exception cref="T:System.ArgumentNullException"><c>documentPaginator</c> is null.</exception>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.MaxPage">
            <summary>
            Gets or sets the highest page number that is allowed in page ranges.
            For more information <seealso cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </summary>
            <value>The highest page number.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.MinPage">
            <summary>
            Gets or sets the lowest page number that is allowed in page ranges.
            For more information <seealso cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </summary>
            <value>The lowest page number.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PageRange">
            <summary>
            Gets or sets the range of pages to print when <see cref="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PageRangeSelection"/> is set to UserPages.
            </summary>
            <value><see cref="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PageRange"/> as the range of pages to print.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PrintableAreaHeight">
            <summary>
            Gets the height of the printable area of the page.
            </summary>
            <value>The height of the printable area of the page.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PrintableAreaWidth">
            <summary>
            Gets the width of the printable area of the page.
            </summary>
            <value>The width of the printable area of the page.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PrintTicket">
            <summary>
            Gets the SafePrintTicket that is used by the SafePrintDialog when the user clicks Print for the current print job. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PageRangeSelection">
            <summary>
            Gets or sets the <see cref="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PageRangeSelection"/> for this instance of PrintDialog.
            </summary>
            <value>The <see cref="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.PageRangeSelection"/> value.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintDialog.UserPageRangeEnabled">
            <summary>
            Gets or sets the value that indicates whether users of the print
            dialog box have the option to specify ranges of pages to print.
            </summary>
            <value><c>true</c> if the document is already open in another window; otherwise <c>false</c>.</value>
            <remarks>
            For more information see <see cref="T:System.Windows.Controls.PrintDialog"/> documentation.
            </remarks>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.CloseReason">
            <summary>
            The reasons of application closing
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.CloseReason.UserInitiated">
            <summary>
            User clsoes the application by using standard Windows commands (close button, Alt-F4, task context menu etc)
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.CloseReason.Programmatically">
            <summary>
            Application is closed because BlpApplication.Shutdown is called. Note: if application calls 
            BlpApplication.Shutdown in a menuitem clicked event handler, it's still considered Programmatically, not UserInitiated.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ClosingEventArgs">
            <summary>
            Provides data for a calcelable closing event
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ClosingEventArgs.ExitCode">
            <summary>
            gets or sets the exit code
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ClosingEventArgs.Reason">
            <summary>
            The reason of clsoe
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ClosedEventArgs">
            <summary>
            Provides data for a closed event
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ClosedEventArgs.ExitCode">
            <summary>
            gets or sets the exit code
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ClosedEventArgs.Reason">
            <summary>
            The reason of clsoe
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ExitEventArgs">
            <summary>
            Event arguments for the BlpApplication.Exit event. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ExitEventArgs.ExitCode">
            <summary>
            gets or sets the exit code
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.DataFormats">
            <summary>
            Provides the clipboard data format names supported by Bloomberg AppPortal API.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.Text">
            <summary>Indicates the Text Format.</summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.UnicodeText">
            <summary>Indicates the Unicode Text Format.</summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.OemText">
            <summary>Indicates the OEM Text Format.</summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.Html">
            <summary>Indicates the HTML Format.</summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.Rtf">
            <summary>Indicates the RTF Format.</summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.StringFormat">
            <summary>Indicates the String Format.</summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.Bitmap">
            <summary> 
            Specifies a Windows bitmap format. This field is read-only.
            </summary> 
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.Dib">
            <summary> 
            Specifies the Windows Device Independent Bitmap (DIB)
            format. This field is read-only. 
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.CommaSeparatedValue">
            <summary>Indicates the Excel CSV Format.</summary>
            <remarks>
            Excel expects the CSV object to be a MemoryStream of UTF8 bytes,
            despite the fact that the built-in SetText(TextDataFormat.CommanSeparatedValue)
            places the CSV data as Unicode text.
            </remarks>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.DataFormats.XmlSpreadsheet">
            <summary>
            Format for copy-pasting data from/into Excel and Office Spreadsheet component:
            the object is expected to be a MemoryStream of bytes of XML data.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/aa140062%28v=office.10%29.aspx#odc_xlsmlinss_copying
            http://social.msdn.microsoft.com/Forums/en-US/winformsdatacontrols/thread/90938d98-4d70-4f25-8086-36286c58be6b/
            </remarks>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbConnection">
            <summary>
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.#ctor">
            <overloads>
             Constructs a new SQLiteConnection object
             </overloads>
             <summary>
             Default constructor.
             </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.#ctor(System.String)">
            <summary>
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.BeginTransaction">
            <summary>
            Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Forwards to the local BeginTransaction() function.
            </summary>
            <param name="isolationLevel">Supported isolation levels are Unspecified, Serializable, and ReadCommitted</param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.Close">
            <summary>
            When the database connection is closed, all commands linked to this connection are automatically reset.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ChangeDatabase(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="databaseName"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.Open">
            <summary>
            Opens the connection using the parameters found in the <see cref="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ConnectionString">ConnectionString</see>
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.CreateCommand">
            <summary>
            Create a new DbCommand and associate it with this connection.
            </summary>
            <returns>Returns an instantiated DbCommand object already assigned to this connection.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.CreateDbCommand">
            <summary>
            Create a new DbCommand and associate it with this connection.
            </summary>
            <returns>Returns an instantiated DbCommand object already assigned to this connection.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.Clone">
            <summary>
            Creates a clone of the connection.  All attached databases and user-defined functions are cloned.  
            If the existing connection is open, the cloned connection 
            will also be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ChangePassword(System.String)">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ChangePassword(System.Byte[])">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.SetPassword(System.String)">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.SetPassword(System.Byte[])">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.GetSchema">
            <overloads>
             The following commands are used to extract schema information out of the database.  Valid schema types are:
             <list type="bullet">
             <item>
             <description>MetaDataCollections</description>
             </item>
             <item>
             <description>DataSourceInformation</description>
             </item>
             <item>
             <description>Catalogs</description>
             </item>
             <item>
             <description>Columns</description>
             </item>
             <item>
             <description>ForeignKeys</description>
             </item>
             <item>
             <description>Indexes</description>
             </item>
             <item>
             <description>IndexColumns</description>
             </item>
             <item>
             <description>Tables</description>
             </item>
             <item>
             <description>Views</description>
             </item>
             <item>
             <description>ViewColumns</description>
             </item>
             </list>
             </overloads>
             <summary>
             Returns the MetaDataCollections schema
             </summary>
             <returns>A DataTable of the MetaDataCollections schema</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.GetSchema(System.String)">
            <summary>
            Returns schema information of the specified collection
            </summary>
            <param name="collectionName">The schema collection to retrieve</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.GetSchema(System.String,System.String[])">
            <summary>
            Retrieves schema information using the specified constraint(s) for the specified collection
            </summary>
            <param name="collectionName">The collection to retrieve</param>
            <param name="restrictionValues">The restrictions to impose</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ClearPool(Bloomberglp.AppPortalApi.Data.Sql.DbConnection)">
            <summary>
            Clears the connection pool associated with the connection.  Any other active connections using the same database file
            will be discarded instead of returned to the pool when they are closed.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ClearAllPools">
            <summary>
            Clears all connection pools.  Any active connections will be discarded instead of sent to the pool when they are closed.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.SetExtendedResultCodes(System.Boolean)">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ResultCode">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ExtendedResultCode">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ConnectionString">
            <summary>
            The connection string containing the parameters for the connection
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>{filename}</description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description><b>Ticks</b> - Use DateTime.Ticks<br/><b>ISO8601</b> - Use ISO8601 DateTime format<br/><b>JulianDay</b> - Use JulianDay format</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>Yes/On/1</b> - Store GUID columns in binary form<br/><b>No/Off/0</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>On</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Normal</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password}</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><B>Y</B> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description><b>True</b> - Use connection pooling<br/><b>False</b> - Do not use connection pooling</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaction isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.Database">
            <summary>
            Returns an constant string
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.State">
            <summary>
            Returns the state of the connection.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.DataSource">
            <summary>
            Returns the filename without extension or path
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbConnection.ServerVersion">
            <summary>
            Returns the version of the underlying SQLite database engine
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext">
            <summary>
             Provides context for persistence data operations.
            </summary>
             <remarks>
             Use <see cref="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.GetNamedContext(System.String)"/> and <see cref="F:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.DefaultContext"/>
             to get this class instance. It has an internal constructor.
             </remarks>
             <seealso cref="T:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService"/>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.SaveData``1(System.String,``0)">
             <summary>
              Persists an instance of type on the Bloomberg network.
             </summary>
             <param name="objectId">The unique identifier of data blob within a given Namespace.</param>
             <param name="data">Reference to object that is being saved (can be be of value tape also).</param>
             <typeparam name="T">Type of object is being saved (see "Data serialization rules" bellow).
              </typeparam>
             <remarks>
             	<para>Data serialization rules.</para>
             	<list type="number">
             		<item>Root object's (the one that is passed to PersistenceService.DefaultContext.SaveData&amp;lt;T&amp;gt;) type can only derive from <see cref="T:System.Object"/> or <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/></item>
             		<item>Types of serialized property or field can be only of the following: primitive types, nested types of root type; array, list, dictionary of primitive
                 types or root's nested classes.</item>
             		<item>What is getting serialized. By default public fields and properties (POCOs - plain old CLR objects). It can customized by using WCF data contract
                 serializer attributes. Types Supported by the Data Contract Serializer (http://msdn.microsoft.com/en-us/library/ms731923.aspx).</item>
             	</list>
             	<para></para>
             </remarks>
             <exception caption="" cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be saved properly on the network.</exception>
             <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data does not confirm to sterilization rules.</exception>
             <example>
              Save custom application data. Data is strongly typed!
              <c>ViewerDataSettings</c> class represents an application configuration
              and state data as self contained object
              <c>TestDataViewerSettingsSample.FillWithSample1</c> instantiates and
              populates <c>ViewerDataSettings</c> with test data.
              
             <code title="Storage of Custom App Data" description="" lang="CS">
             class Program
             {
                 static void Main(string[] args)
                 {
                     //Prepare test data
                     var data = TestDataViewerSettingsSample.FillWithSample1();
              
                     //Save blob of data with a key and application nameSpace
                     PersistenceService.DefaultContext.SaveData("ThisApplicationStateKey", data);
                 }
             }
            
             // Root class, it's content will be used to save.
             public sealed class ViewerDataSettings
             {
                 // An abstract class to demonstrate inheritance
                 // inside self contained root class "schema"
                 public abstract class AliasEntry
                 {
                     public string AliasName;
                     public string RealName;
                 }
                 // these types will be validated by the serializer -
                 // derive from nested class of the root class.
                 public class FileAlias : AliasEntry { }
                 public class TerminalAlias : AliasEntry { }
                 // Another nested abstract lass 
                 public abstract class BookmarkNode
                 {
                     public int NodeId;
                     public int ParentId;
                 }
                 // Class inherits from root's nested class.
                 public class BookmarkEntry : BookmarkNode
                 {
                     public string Name;
                     public TerminalAlias Terminal;
                     public FileAlias Log;
                     public DateTime Created;
                     public DateTime Accessed;
                 }
                 // Class inherits from root's nested class.
                 public class BookmarkFolder : BookmarkNode
                 {
                     public string FolderName;
                     public List&lt;BookmarkFolder&gt; SubFolders = new List&lt;BookmarkFolder&gt;();
                     public List&lt;BookmarkEntry&gt; Bookmarks = new List&lt;BookmarkEntry&gt;();
                 }
                 // Example of a nested class
                 public class ViewHistoryEntry
                 {
                     public TerminalAlias Terminal;
                     public FileAlias LogFile;
                     public DateTime LastUsed;
                 }
              
                 // Example of a nested struct
                 public struct AppPosition
                 {
                     public double Top;
                     public double Bottom;
                     public double Right;
                     public double Left;
                 }
                 // Example of a member of root class.
                 public BookmarkFolder BookmarkRoot = new BookmarkFolder();
              
                 // Example of a Dictionary member - allowed by the serializer.
                 public Dictionary&lt;string, string&gt; FileAliasMap = new Dictionary&lt;string, string&gt;();
                 public Dictionary&lt;string, string&gt; TerminalAliasMap = new Dictionary&lt;string, string&gt;();
                 // Example of a Dictionary member - allowed by the serializer.
                 public List&lt;ViewHistoryEntry&gt; ViewHistory = new List&lt;ViewHistoryEntry&gt;();
                 // Another member of root class - fro completeness.
                 public AppPosition LastAppPosition;
             }
            
             public static class TestDataViewerSettingsSample
             {
                 private static int _nextId = -1;
                 public static ViewerDataSettings FillWithSample1()
                 {
                     var sample = new ViewerDataSettings
                     {
                         LastAppPosition = new ViewerDataSettings.AppPosition
                                             {
                                                 Top = 1,
                                                 Bottom = 800,
                                                 Left = 1,
                                                 Right = 800
                                             },
                         FileAliasMap = new Dictionary&lt;string, string&gt;
                                            {
                                               {"Bbcomm","Bcomm.log"},
                                               {"Hits","bbsmarthosthit.log"}
                                            },
                         TerminalAliasMap =
                             {
                                 {"Old PC","163249"},
                                 {"WS","565333"}
                             },
                         ViewHistory = new List&lt;ViewerDataSettings.ViewHistoryEntry&gt;
                                           {
                                               new ViewerDataSettings.ViewHistoryEntry
                                                   {
                                                       Terminal = new ViewerDataSettings.TerminalAlias
                                                                      {
                                                                          RealName = "163249",
                                                                          AliasName = "Old PC"
                                                                      },
                                                       LogFile = new ViewerDataSettings.FileAlias
                                                                     {
                                                                          RealName = "app_12345.log",
                                                                          AliasName = "progid1"
                                                                     },
                                                       LastUsed = DateTime.Now
                                                   },
                                               new ViewerDataSettings.ViewHistoryEntry
                                                   {
                                                       Terminal = new ViewerDataSettings.TerminalAlias
                                                                      {
                                                                          RealName = "163249",
                                                                          AliasName = "Old PC"
                                                                      },
                                                       LogFile = new ViewerDataSettings.FileAlias
                                                                     {
                                                                          RealName = "app_54321.log",
                                                                          AliasName = "progid2"
                                                                     },
                                                       LastUsed = DateTime.Now
                                                   }
                                           },
                         BookmarkRoot = new ViewerDataSettings.BookmarkFolder
                             {
                                 ParentId = -1,
                                 FolderName = "RootFolder",
                                 Bookmarks = new List&lt;ViewerDataSettings.BookmarkEntry&gt;
                                 {
                                     new ViewerDataSettings.BookmarkEntry
                                     {
                                         Name = "Bookmark_0_0",
                                         Terminal = new ViewerDataSettings.TerminalAlias
                                                 {
                                                     RealName = "Terminal_Realname_0_0",
                                                     AliasName = "Terminal_Alias_0_0"
                                                 },
                                         Log = new ViewerDataSettings.FileAlias
                                                 {
                                                     RealName = "Log_Realname_0_0",
                                                     AliasName = "Log_Alias_0_0"
                                                 },
                                         Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                         Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                     },
                                     new ViewerDataSettings.BookmarkEntry
                                     {
                                         Name = "Bookmark_0_0",
                                         Terminal = new ViewerDataSettings.TerminalAlias
                                                 {
                                                     RealName = "Terminal_Realname_0_1",
                                                     AliasName = "Terminal_Alias_0_1"
                                                 },
                                         Log = new ViewerDataSettings.FileAlias
                                                 {
                                                     RealName = "Log_Realname_0_1",
                                                     AliasName = "Log_Alias_0_1"
                                                 },
                                         Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                         Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                     }
                                 },   
                                 SubFolders = new List&lt;ViewerDataSettings.BookmarkFolder&gt;
                                 {
                                       new ViewerDataSettings.BookmarkFolder
                                         {
                                             ParentId = 0,
                                             FolderName = "SubFolder_1",
                                             Bookmarks = new List&lt;ViewerDataSettings.BookmarkEntry&gt;
                                             {
                                                 new ViewerDataSettings.BookmarkEntry
                                                 {
                                                     Name = "Bookmark_0_0",
                                                     Terminal = new ViewerDataSettings.TerminalAlias
                                                             {
                                                                 RealName = "Terminal_Realname_1_0",
                                                                 AliasName = "Terminal_Alias_1_0"
                                                             },
                                                     Log = new ViewerDataSettings.FileAlias
                                                             {
                                                                 RealName = "Log_Realname_1_0",
                                                                 AliasName = "Log_Alias_1_0"
                                                             },
                                                     Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                                     Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                                 },
                                                 new ViewerDataSettings.BookmarkEntry
                                                 {
                                                     Name = "Bookmark_0_0",
                                                     Terminal = new ViewerDataSettings.TerminalAlias
                                                             {
                                                                 RealName = "Terminal_Realname_1_1",
                                                                 AliasName = "Terminal_Alias_1_1"
                                                             },
                                                     Log = new ViewerDataSettings.FileAlias
                                                             {
                                                                 RealName = "Log_Realname_1_1",
                                                                 AliasName = "Log_Alias_1_1"
                                                             },
                                                     Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                                     Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                                 }                                      
                                             }               
                                         }
                                 }                    
                             }
                     };
                     var id = -1;
                     SetParents(sample.BookmarkRoot, id);
                     return sample;
                 }
                 private static void SetParents(ViewerDataSettings.BookmarkFolder node, int parentId)
                 {
                     node.ParentId = parentId;
                     node.NodeId = ++_nextId;
                     foreach (var f in node.Bookmarks)
                     {
                         f.ParentId = node.NodeId;
                         f.NodeId = ++_nextId;
                     }
                     foreach (var c in node.SubFolders)
                     {
                         SetParents(c, node.NodeId);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.GetData``1(System.String)">
            <summary>
             De-serializes an instance of object from persistent storage.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
            <typeparam name="T">Data type of de-serialized data. Type should be compatible with the type
             used to serialize data. See "Basic rules of type compatibility" bellow.</typeparam>
            <returns>Strongly typed data, that is de-serialized form a persistence storage.</returns>
             <exception cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be retrieved properly from the network.</exception>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data does not confirm to sterilization rules.</exception>
             <remarks>
             <para>See <see cref="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.SaveData``1(System.String,``0)"/> for data serialization rules</para>
             <para>Type compatibility rules:</para>
             <list type="bullet">
             <item>Do not change properties/fields names.</item>
             <item>Do not change properties/fields types.</item>
             <item>Do not delete properties/fields.</item>
             <item>Do not attempt to version data contracts by type inheritance.</item>
             <item>Starting with the first version of a data contract, always inherit
             from <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/> to enable round-tripping. <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/>
             implements IExtensibleDataObject interface. 
             See "Forward-Compatible Data Contracts" (http://msdn.microsoft.com/en-us/library/ms731083.aspx) </item>
             <item>Use guidelines from MSDN's "Versioning When Schema Validation Is Not Required"
             (http://msdn.microsoft.com/en-us/library/ms733832.aspx).</item>
             </list>        
             </remarks>
             <example>This example creates an instance of <c>ViewerDataSettings</c> from previously saved data.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    //Get blob of data with a key and application nameSpace into an instance of type
                    var data = PersistenceService.DefaultContext.ReadObject&lt;ViewerDataSettings&gt;("ThisApplicationStateKey");
                }
            }
            
                // Root class, it's content will be used to save.
                public sealed class ViewerDataSettings
                {
                    // An abstract class to demonstrate inheritance
                    // inside self contained root class "schema"
                    public abstract class AliasEntry
                    {
                        public string AliasName;
                        public string RealName;
                    }
            
                    // these types will be validated by the serializer -
                    // derive from nested class of the root class.
                    public class FileAlias : AliasEntry { }
                    public class TerminalAlias : AliasEntry { }
            
                    // Another nested abstract lass 
                    public abstract class BookmarkNode
                    {
                        public int NodeId;
                        public int ParentId;
                    }
            
                    // Class inherits from root's nested class.
                    public class BookmarkEntry : BookmarkNode
                    {
                        public string Name;
                        public TerminalAlias Terminal;
                        public FileAlias Log;
                        public DateTime Created;
                        public DateTime Accessed;
                    }
            
                    // Class inherits from root's nested class.
                    public class BookmarkFolder : BookmarkNode
                    {
                        public string FolderName;
                        public List&lt;BookmarkFolder&gt; SubFolders = new List&lt;BookmarkFolder&gt;();
                        public List&lt;BookmarkEntry&gt; Bookmarks = new List&lt;BookmarkEntry&gt;();
                    }
            
                    // Example of a nested class
                    public class ViewHistoryEntry
                    {
                        public TerminalAlias Terminal;
                        public FileAlias LogFile;
                        public DateTime LastUsed;
                    }
             
                    // Example of a nested struct
                    public struct AppPosition
                    {
                        public double Top;
                        public double Bottom;
                        public double Right;
                        public double Left;
                    }
            
                    // Example of a member of root class.
                    public BookmarkFolder BookmarkRoot = new BookmarkFolder();
             
                    // Example of a Dictionary member - allowed by the serializer.
                    public Dictionary&lt;string, string&gt; FileAliasMap = new Dictionary&lt;string, string&gt;();
                    public Dictionary&lt;string, string&gt; TerminalAliasMap = new Dictionary&lt;string, string&gt;();
            
                    // Example of a Dictionary member - allowed by the serializer.
                    public List&lt;ViewHistoryEntry&gt; ViewHistory = new List&lt;ViewHistoryEntry&gt;();
            
                    // Another member of root class - fro completeness.
                    public AppPosition LastAppPosition;
                }
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.GetDataAsString(System.String)">
             <summary>De-serializes an instance of object as raw JSON. Intended to be used for debugging, or when a type the data was serialized from does not exists or is not
             compatible with the original anymore.</summary>
             <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
             <remarks>Internal format (JSON) subject to change in future versions!</remarks>
             <returns>Internal object representation as string. Currently it is JSON.</returns>
             <exception caption="" cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be retrieved properly from the network.</exception>
             <example>
              Get object as string.
              
             <code title="JSON De-serilization" description="" lang="CS">
             // Simple class with two properties
                 public class ExampleClass
                 {
                     public string StringPop = "String Property";
                     public int IntProperty = 20110801;
                 }
                 
                 [TestMethod]
                 public void PrintObjectAsJsonString()
                 {
                     // Save data by using an object serialization
                     PersistenceService.SaveData("Key1", new ExampleClass());
            
                     // Get data back as string in JSON format
                     var data = PersistenceService.GetDataAsString("Key1");
                     Debug.WriteLine(data);
                 }
                 
             Output:
             {"IntProperty":20110801,"StringPop":"String Property"}</code></example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.RemoveData(System.String)">
            <summary>
            Removes record from persistent storage.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given namespace.</param>
            <returns>True - if record existed. False - if attempted to delete non-existing record.</returns>
            <exception caption="" cref="T:System.ArgumentException">Root id cannot be null or empty.</exception>
            <example>
            <code title="Data Removal" description="" lang="CS">
            ...
            PersistenceService.DefaultContext.DefaultContext.RemoveData("Key1");
            ...</code>
            </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.KeyExists(System.String)">
            <summary>
             Checks if record exists in persistent storage.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
            <returns>True - if record exists.</returns>
            <exception caption="" cref="T:System.ArgumentException">Root id cannot be null or empty.</exception>
            <example>
            <code title="Data Existence Query" description="" lang="CS">
            ...
            var isRecordExist = PersistenceService.DefaultContext.KeyExists("Key1")
            ...</code>
            </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.Equals(Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext)">
            <summary>
             Equals if context names are equal. Comparison is context insensitive.
            </summary>
            <param name="p">Context object to compare with</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.op_Equality(Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext,Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext)">
            <summary>
             Equals if context names are equal. Comparison is context insensitive.
            </summary>
            <param name="a">Left side operand</param>
            <param name="b">Right side operand</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.op_Inequality(Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext,Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext)">
            <summary>
             Negation of equality operator
            </summary>
            <param name="a">Left side operand</param>
            <param name="b">Right side operand</param>
            <returns>True if not equal</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.ContextName">
            <summary>
             This context name.
            </summary>
             <value>context logical name</value>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility._GetBestMatch(System.Collections.Generic.IList{System.Windows.Media.Imaging.BitmapFrame},System.Int32,System.Int32,System.Int32)">
            From a list of BitmapFrames find the one that best matches the requested dimensions.
            The methods used here are copied from Win32 sources.  We want to be consistent with
            system behaviors.
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.ColorFromArgbDword(System.UInt32)">
            <summary>Convert a native integer that represent a color with an alpha channel into a Color struct.</summary>
            <param name="color">The integer that represents the color.  Its bits are of the format 0xAARRGGBB.</param>
            <returns>A Color representation of the parameter.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.SafeCopyFile(System.String,System.String,Microsoft.Windows.Shell.SafeCopyFileOptions)">
            <summary>
            Wrapper around File.Copy to provide feedback as to whether the file wasn't copied because it didn't exist.
            </summary>
            <param name="cachePath"></param>
            <param name="suggestedPath"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.SafeDeleteFile(System.String)">
            <summary>
            Simple guard against the exceptions that File.Delete throws on null and empty strings.
            </summary>
            <param name="path">The path to delete.  Unlike File.Delete, this can be null or empty.</param>
            <remarks>
            Note that File.Delete, and by extension SafeDeleteFile, does not throw an exception
            if the file does not exist.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.SafeDeleteObject(System.IntPtr@)">
            <summary>GDI's DeleteObject</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.SafeDisposeImage(System.IntPtr@)">
            <summary>GDI+'s DisposeImage</summary>
            <param name="gdipImage"></param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.GeneratePropertyString(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Utility to help classes catenate their properties for implementing ToString().
            </summary>
            <param name="source">The StringBuilder to catenate the results into.</param>
            <param name="propertyName">The name of the property to be catenated.</param>
            <param name="value">The value of the property to be catenated.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.GenerateToString``1(``0)">
            <summary>
            Generates ToString functionality for a struct.  This is an expensive way to do it,
            it exists for the sake of debugging while classes are in flux.
            Eventually this should just be removed and the classes should
            do this without reflection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Utility.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.  Duplicated functionality from System.Web.HttpUtility.UrlEncode.
            </summary>
            <param name="url"></param>
            <returns></returns>
            <remarks>
            Duplicated from System.Web.HttpUtility because System.Web isn't part of the client profile.
            URL Encoding replaces ' ' with '+' and unsafe ASCII characters with '%XX'.
            Safe characters are defined in RFC2396 (http://www.ietf.org/rfc/rfc2396.txt).
            They are the 7-bit ASCII alphanumerics and the mark characters "-_.!~*'()".
            This implementation does not treat '~' as a safe character to be consistent with the System.Web version.
            </remarks>
        </member>
        <member name="P:Microsoft.Windows.Shell.Utility.IsPresentationFrameworkVersionLessThan4">
            <summary>
            Is this using WPF4?
            </summary>
            <remarks>
            There are a few specific bugs in Window in 3.5SP1 and below that require workarounds
            when handling WM_NCCALCSIZE on the HWND.
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.DoubleUtilities">
            <summary>
            DoubleUtil uses fixed eps to provide fuzzy comparison functionality for doubles.
            NOTE:  FP noise is a big problem and using any of these compare 
            methods is NOT a complete solution, but rather the way to reduce 
            the probability of repeating unnecessary work.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.DoubleUtilities.Epsilon">
            <summary>
            Epsilon - more or less random, more or less small number.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.AreClose(System.Double,System.Double)">
            <summary>
            AreClose returns whether or not two doubles are "close."  That is, whether or 
            not they are within epsilon of each other.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false. 
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the AreClose comparision.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.LessThan(System.Double,System.Double)">
            <summary>
            LessThan returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than AND not within epsilon of
            the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the LessThan comparision.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than AND not within epsilon of
            the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the GreaterThan comparision.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the LessThanOrClose comparision.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the GreaterThanOrClose comparision.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.IsFinite(System.Double)">
            <summary>
            Test to see if a double is a finite number (is not NaN or Infinity.)
            </summary>
            <param name='value'>The value to test.</param>
            <returns>Whether or not the value is a finite number.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DoubleUtilities.IsValidSize(System.Double)">
            <summary>
            Test to see if a double a valid size value (is finite and > 0).
            </summary>
            <param name='value'>The value to test.</param>
            <returns>Whether or not the value is a valid size value.</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Security">
            <summary>
             Enumeration type to represent the security name. Possible values are 'Security1', 'Security2', 'Security3' and 'Security4'
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.SecurityComponentProperty">
            <summary>
            Encapsulate security component property and its value 
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.SecurityComponentProperty.#ctor(Bloomberglp.AppPortalApi.Security,System.String)">
            <summary>
            </summary>
            <param name="name">Name of the security</param>
            <param name="value">Value of the security (e.g IBM Equity)</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.SecurityComponentProperty.ToString">
            <summary>
            Override  displays Name and its value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.SecurityComponentProperty.Name">
            <summary>
            Name of the propery, possible values are 'Security 1', 'Security 2', 'Security 3' and 'Security 4'
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.SecurityComponentProperty.Value">
            <summary>
            Value of the property, for example 'IBM Equity'
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.Win32Error">
            <summary>
            Wrapper for common Win32 status codes.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_SUCCESS">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_INVALID_FUNCTION">
            <summary>Incorrect function.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_FILE_NOT_FOUND">
            <summary>The system cannot find the file specified.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_PATH_NOT_FOUND">
            <summary>The system cannot find the path specified.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_TOO_MANY_OPEN_FILES">
            <summary>The system cannot open the file.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_ACCESS_DENIED">
            <summary>Access is denied.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_INVALID_HANDLE">
            <summary>The handle is invalid.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_OUTOFMEMORY">
            <summary>Not enough storage is available to complete this operation.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_NO_MORE_FILES">
            <summary>There are no more files.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_SHARING_VIOLATION">
            <summary>The process cannot access the file because it is being used by another process.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_INVALID_PARAMETER">
            <summary>The parameter is incorrect.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_INSUFFICIENT_BUFFER">
            <summary>The data area passed to a system call is too small.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_NESTING_NOT_ALLOWED">
            <summary>Cannot nest calls to LoadModule.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_KEY_DELETED">
            <summary>Illegal operation attempted on a registry key that has been marked for deletion.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_NOT_FOUND">
            <summary>Element not found.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_NO_MATCH">
            <summary>There was no match for the specified key in the index.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_BAD_DEVICE">
            <summary>An invalid device was specified.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_CANCELLED">
            <summary>The operation was canceled by the user.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_CANNOT_FIND_WND_CLASS">
            <summary>Cannot find window class.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_CLASS_ALREADY_EXISTS">
            <summary>The window class was already registered.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Win32Error.ERROR_INVALID_DATATYPE">
            <summary>The specified datatype is invalid.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.Win32Error.#ctor(System.Int32)">
            <summary>
            Create a new Win32 error.
            </summary>
            <param name="i">The integer value of the error.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Win32Error.op_Explicit(Microsoft.Windows.Shell.Win32Error)~Microsoft.Windows.Shell.HRESULT">
            <summary>Performs HRESULT_FROM_WIN32 conversion.</summary>
            <param name="error">The Win32 error being converted to an HRESULT.</param>
            <returns>The equivilent HRESULT value.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Win32Error.ToHRESULT">
            <summary>Performs HRESULT_FROM_WIN32 conversion.</summary>
            <param name="error">The Win32 error being converted to an HRESULT.</param>
            <returns>The equivilent HRESULT value.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Win32Error.GetLastError">
            <summary>Performs the equivalent of Win32's GetLastError()</summary>
            <returns>A Win32Error instance with the result of the native GetLastError</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Win32Error.op_Equality(Microsoft.Windows.Shell.Win32Error,Microsoft.Windows.Shell.Win32Error)">
            <summary>
            Compare two Win32 error codes for equality.
            </summary>
            <param name="errLeft">The first error code to compare.</param>
            <param name="errRight">The second error code to compare.</param>
            <returns>Whether the two error codes are the same.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.Win32Error.op_Inequality(Microsoft.Windows.Shell.Win32Error,Microsoft.Windows.Shell.Win32Error)">
            <summary>
            Compare two Win32 error codes for inequality.
            </summary>
            <param name="errLeft">The first error code to compare.</param>
            <param name="errRight">The second error code to compare.</param>
            <returns>Whether the two error codes are not the same.</returns>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Null">
            <summary>FACILITY_NULL</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Rpc">
            <summary>FACILITY_RPC</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Dispatch">
            <summary>FACILITY_DISPATCH</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Storage">
            <summary>FACILITY_STORAGE</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Itf">
            <summary>FACILITY_ITF</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Win32">
            <summary>FACILITY_WIN32</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Windows">
            <summary>FACILITY_WINDOWS</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Control">
            <summary>FACILITY_CONTROL</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.Ese">
            <summary>MSDN doced facility code for ESE errors.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.Facility.WinCodec">
            <summary>FACILITY_WINCODEC (WIC)</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.HRESULT">
            <summary>Wrapper for HRESULT status codes.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.S_OK">
            <summary>S_OK</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.S_FALSE">
            <summary>S_FALSE</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_PENDING">
            <summary>E_PENDING</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_NOTIMPL">
            <summary>E_NOTIMPL</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_NOINTERFACE">
            <summary>E_NOINTERFACE</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_POINTER">
            <summary>E_POINTER</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_ABORT">
            <summary>E_ABORT</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_FAIL">
            <summary>E_FAIL</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_UNEXPECTED">
            <summary>E_UNEXPECTED</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.STG_E_INVALIDFUNCTION">
            <summary>STG_E_INVALIDFUNCTION</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.REGDB_E_CLASSNOTREG">
            <summary>REGDB_E_CLASSNOTREG</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.DESTS_E_NO_MATCHING_ASSOC_HANDLER">
            <summary>DESTS_E_NO_MATCHING_ASSOC_HANDLER.  Win7 internal error code for Jump Lists.</summary>
            <remarks>There is no Assoc Handler for the given item registered by the specified application.</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.DESTS_E_NORECDOCS">
            <summary>DESTS_E_NORECDOCS.  Win7 internal error code for Jump Lists.</summary>
            <remarks>The given item is excluded from the recent docs folder by the NoRecDocs bit on its registration.</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.DESTS_E_NOTALLCLEARED">
            <summary>DESTS_E_NOTALLCLEARED.  Win7 internal error code for Jump Lists.</summary>
            <remarks>Not all of the items were successfully cleared</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_ACCESSDENIED">
            <summary>E_ACCESSDENIED</summary>
            <remarks>Win32Error ERROR_ACCESS_DENIED.</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_OUTOFMEMORY">
            <summary>E_OUTOFMEMORY</summary>
            <remarks>Win32Error ERROR_OUTOFMEMORY.</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.E_INVALIDARG">
            <summary>E_INVALIDARG</summary>
            <remarks>Win32Error ERROR_INVALID_PARAMETER.</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.INTSAFE_E_ARITHMETIC_OVERFLOW">
            <summary>INTSAFE_E_ARITHMETIC_OVERFLOW</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.COR_E_OBJECTDISPOSED">
            <summary>COR_E_OBJECTDISPOSED</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.WC_E_GREATERTHAN">
            <summary>WC_E_GREATERTHAN</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.HRESULT.WC_E_SYNTAX">
            <summary>WC_E_SYNTAX</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.HRESULT.#ctor(System.UInt32)">
            <summary>
            Create an HRESULT from an integer value.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Microsoft.Windows.Shell.HRESULT.op_Explicit(Microsoft.Windows.Shell.HRESULT)~System.Int32">
            <summary>
            Convert an HRESULT to an int.  Used for COM interface declarations out of our control.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.HRESULT.ToString">
            <summary>
            Get a string representation of this HRESULT.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.HRESULT.ThrowLastError">
            <summary>
            Convert the result of Win32 GetLastError() into a raised exception.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.HRESULT.Facility">
            <summary>
            retrieve HRESULT_FACILITY
            </summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.HRESULT.Code">
            <summary>
            retrieve HRESULT_CODE
            </summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChrome.CaptionHeight">
            <summary>The extent of the top of the window to treat as the caption.</summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.WindowCommands">
            <summary>
             WindowCommands commands.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.WindowCommands.CloseCommand">
            <summary>
             CloseCommand command.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.WindowCommands.MinimizeCommand">
            <summary>
             MinimizeCommand command.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.WindowCommands.MaximizeCommand">
            <summary>
             MaximizeCommand command.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.WindowCommands.RestoreCommand">
            <summary>
             RestoreCommand command.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.DataElement">
            <summary>
             Represents the data element when the object is de-serialized as a dictionary.
            </summary>
             <remarks>
             This class is used to manually map data from persistent storage to object.
             <list type="bullet">
             <item>Access values by name if they are properties or fields.</item>
             <item>If simple type is returned - the implicit cast is used for <c>int</c>, <c>bool</c>, 
             <c>double</c>, <c>string</c> and <c>DateTime</c>.</item>
             <item>Otherwise <c>DataElement</c> is returned.</item>
             </list>
             </remarks>
             <example>
             Manual data mapping examples:
             <code>
            
            public class RawDataMappingIllustration
            {
                public class SmallObj
                {
                    public string S;
                }
            
                //Array of primitive values
                public int[] Ai = new[] { 1, 2, 3 };
            
                //Array of objects
                public SmallObj[] Ao = new[] { new SmallObj { S = "a" }, new SmallObj { S = "b" }, new SmallObj { S = null }, null };
                //List of objects
                public List&lt;SmallObj&gt; Al = new List&lt;SmallObj&gt; { new SmallObj { S = "a" }, new SmallObj { S = "b" } };
            
                //Dictionary of pair of string key and object value
                public Dictionary&lt;string, SmallObj&gt; Ad = new Dictionary&lt;string, SmallObj&gt; { { "k1", new SmallObj { S = "v1" } }, { "k2", new SmallObj { S = "v2" } } };
            
                //String value
                public string S = "string value";
            
                //Long value
                public long L = 1;
            
                //Special case in JSON we treat DateTime as primitive value
                public DateTime D = DateTime.Now;
            
                //Object value
                public SmallObj Os = new SmallObj();
                public SmallObj OsN;
            
                // Serializes this object, then reads it back as parsed JSON tree and makes new instance 
                // by manually assigning JSON values to object members.
                // In production code any result of indexer has to be tested for nulls if they are going to be used
                // for consequent operations like method calls.
                public static RawDataMappingIllustration CopyObject()
                {
                    PersistenceService.SaveData("CopyUsingJsonKey", new RawDataMappingIllustration());
                    var data = PersistenceService.GetDataAsDictionary("CopyUsingJsonKey");
                    var r = data;
            
                    var res = new RawDataMappingIllustration
                    {
                        D = r["D"],
                        S = r["S"],
                        L = r["L"],
                        Ai = r["Ai"].ToArray(v =&gt; (int)v),
                        Ao = r["Ao"].ToArray(v =&gt; (v == null) ? null : new SmallObj { S = (string)v["S"] }),
                        Al = r["Al"].ToList(v =&gt; (v == null) ? null : new SmallObj { S = (string)v["S"] }),
                        Os = (r["OsN"] == null) ? null : new SmallObj { S = r["Os"]["S"] },
                        OsN = (r["OsN"] == null) ? null : new SmallObj { S = r["OsN"]["S"] },
                        Ad = r["Ad"].ToDictionary&lt;string, SmallObj&gt;(k =&gt; k, v =&gt; (v == null) ? null : new SmallObj { S = (string)v["S"] })
                    };
                    return res;
                }
            
                // Same as previous example, only index operation is replace with Item extension function.
                // This does not throw an exception when object (this) is null.
                public static RawDataMappingIllustration CopyObjectTollerant()
                {
                    PersistenceService.SaveData("CopyUsingJsonKey", new RawDataMappingIllustration());
                    var data = PersistenceService.GetDataAsDictionary("CopyUsingJsonKey");
                    var r = data;
            
                    var res = new RawDataMappingIllustration
                    {
                        D = r.Item("D"),
                        S = r.Item("S"),
                        L = r.Item("L"),
                        Ai = r.Item("Ai").ToArray(v =&gt; (int)v),
                        Ao = r.Item("Ao").ToArray(v =&gt; (v == null) ? null : new SmallObj { S = (string)v.Item("S") }),
                        Al = r.Item("Al").ToList(v =&gt; new SmallObj { S = (string)v.Item("S") }),
                        Os = (r.Item("Os") == null) ? null : new SmallObj { S = r.Item("Os").Item("S") },
                        OsN = (r.Item("OsN") == null) ? null : new SmallObj { S = r.Item("OsN").Item("S") },
                        Ad = r.Item("Ad").ToDictionary&lt;string, SmallObj&gt;(k =&gt; k, v =&gt; new SmallObj { S = (string)v.Item("S") })
                    };
                    return res;
                }
            }    
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElement.op_Implicit(Bloomberglp.AppPortalApi.DataPersistence.DataElement)~System.Int32">
            <summary>
             Implicit cast for <c>int</c>
            </summary>
            <param name="type">Data reference</param>
            <returns>(int) value</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElement.op_Implicit(Bloomberglp.AppPortalApi.DataPersistence.DataElement)~System.Double">
            <summary>
             Implicit cast for <c>double</c>
            </summary>
            <param name="type">Data reference</param>
            <returns>(double) value</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElement.op_Implicit(Bloomberglp.AppPortalApi.DataPersistence.DataElement)~System.Boolean">
            <summary>
             Implicit cast for <c>bool</c>
            </summary>
            <param name="type">Data reference</param>
            <returns>(bool) value</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElement.op_Implicit(Bloomberglp.AppPortalApi.DataPersistence.DataElement)~System.String">
            <summary>
             Implicit cast for <c>string</c>
            </summary>
            <param name="type">Data reference</param>
            <returns>(string) value</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElement.op_Implicit(Bloomberglp.AppPortalApi.DataPersistence.DataElement)~System.DateTime">
            <summary>
             Implicit cast for <c>DateTime</c>
            </summary>
            <param name="type">Data reference</param>
            <returns>(DateTime) value</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.DataElement.InternalValue">
            <summary>
            Internal object representation.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.DataElement.Item(System.String)">
            <summary>
             Indexer to get object's property/field value by name
            </summary>
            <param name="key">Property or filed name</param>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.DataElement.Item(System.Int32)">
            <summary>
             Indexer to get an array element by index number
            </summary>
            <param name="index">Array's index</param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.FileDialogExt">
            <summary>
            The abstract base class of OpenFileDialog and SaveFileDialog.
            </summary>
            <summary>
            Contains a base file dialog extension implementation.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.#ctor">
            <summary>
            Creates an instance of FileDialog.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Defines the common dialog box hook procedure that is overridden
            to add specific functionality to the file dialog box.
            </summary>
            <param name="hwnd">Window handle for the Win32 dialog.</param>
            <param name="msg">Windows message to be processed by the Win32 dialog.</param>
            <param name="wParam">Parameters for dialog actions.</param>
            <param name="lParam">Parameters for dialog actions</param>
            <returns>A zero value if the default dialog box procedure processes the message; a nonzero value if the default dialog box procedure ignores the message.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.OnFileOk(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the FileOk event.
            </summary>
            <param name="e">The event's arguments.</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.Reset">
            <summary>
            Resets all properties to their default values and overrides CommonDialog.Reset().
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.ShowDialog">
            <summary>
            Runs a common dialog box with a default owner.
            </summary>
            <returns>If the user clicks the OK button of the dialog that is displayed,
            true is returned; otherwise, false is returned.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.RunDialog(System.IntPtr)">
            <summary>
            Infrastructure. Specifies a common dialog box and overrides CommonDialog.RunDialog(IntPtr).
            </summary>
            <param name="hwndOwner">A handle to the window that owns the dialog box.</param>
            <returns>If the user clicks the OK button of the dialog that is displayed,
            true is returned; otherwise, false is returned.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.ToString">
            <summary>
            Infrastructure. Provides a string version of this object and Overrides Component.ToString().
            </summary>
            <returns>A string version of this object.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.AddFileTypeFilter(System.String,System.String)">
            <summary>
            Add File Type Filter. Caller calls this method to allow what type of file will show in the dialog.
            </summary>
            <param name="displayText">The text that appears in the File Type dropdown. For example: "Text files (*.txt)", "Excel files (*.xls;*.xlsx)"</param>
            <param name="extension">The extension of the file. Use ; separate multiple extensions. For example: "*.txt", "*.xls;*.xlsx". All files filter("*.*") is not allowed</param>
            <remarks>
            Caller must add one or more filters before calling ShowDialog. Otherwise ShowDialog will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>A string containing the full path of the file selected in a file dialog.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.FileNames">
            <summary>
            Gets an array that contains one file name for each selected file.
            </summary>
            <value>An array that contains one file name for each selected file.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.SafeFileName">
            <summary>
            Gets a string that only contains the file name for the selected file.
            </summary>
            <value>A string that only contains the file name for the selected file.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.SafeFileNames">
            <summary>
            Gets an array that contains one safe file name for each selected file.
            </summary>
            <value>An array that contains one safe file name for each selected file.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>The text that appears in the title bar of a file dialog.</value>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.FileOk">
            <summary>
            Occurs when the user selects a file name by either clicking the Open button of the 
            OpenFileDialog or the Save button of the SaveFileDialog. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically
            adds an extension to a file name if the user omits an extension.
            </summary>
            <value>A value indicating whether a file dialog automatically
            adds an extension to a file name if the user omits an extension.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether a file dialog displays a warning 
            if the user specifies a file name that does not exist.
            </summary>
            <value>A value that indicates whether a file dialog displays a warning if the user specifies a file name that does not exist.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.CheckPathExists">
            <summary>
            Gets or sets a value that specifies whether warnings are displayed
            if the user types invalid paths and file names.
            </summary>
            <value>A value that specifies whether warnings are displayed if the user types invalid paths and file names.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to 
            use to filter the list of files that are displayed.
            </summary>
            <value>A value that specifies the default extension string to
            use to filter the list of files that are displayed.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.DereferenceLinks">
            <summary>
            Gets or sets a value indicating whether a file dialog returns either the 
            location of the file referenced by a shortcut or the location of the shortcut file (.lnk).
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.RestoreDirectory">
            <summary>
            Gets or sets a value indicating whether the dialog box restores the current 
            directory before closing.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.ValidateNames">
            <summary>
            Gets or sets a value indicating whether the dialog accepts only valid Win32 file names.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files
            are displayed from either the OpenFileDialog or SaveFileDialog.
            </summary>
            <value>The filter string that determines what types of files are displayed.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in a file dialog.
            </summary>
            <value>The index of the filter currently selected in a file dialog.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.FileDialogExt.Options">
            <summary>
            Infrastructure. Gets values to initialize the FileDialog.
            </summary>
            <value>Values to initialize the FileDialog.</value>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbParameter">
            <summary>
            SQLite implementation of DbParameter.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String)">
            <summary>
            Constructs a named parameter given the specified parameter name.
            </summary>
            <param name="parameterName">The parameter name</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructs a named parameter given the specified parameter name and initial value.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Constructs a named parameter of the specified type.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.String)">
            <summary>
            Constructs a named parameter of the specified type and source column reference.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, source column and row version.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType)">
            <summary>
            Constructs an unnamed parameter of the specified data type.
            </summary>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType,System.Object)">
            <summary>
            Constructs an unnamed parameter of the specified data type and sets the initial value.
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified data type and source column.
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified data type, source column and row version.
            </summary>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Constructs a named parameter of the specified type and size.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs a named parameter of the specified type, size and source column.
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version.
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version.
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="isNullable">Ignored</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="value">The initial value to assign the parameter</param>   
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
            <summary>
            Constructs a named parameter, yet another flavor.
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="sourceColumnNullMapping">Whether or not this parameter is for comparing NULL's</param>
            <param name="value">The initial value to assign the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType,System.Int32)">
            <summary>
            Constructs an unnamed parameter of the specified type and size.
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, and source column.
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.#ctor(System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, source column and row version.
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.ResetDbType">
            <summary>
            Resets the DbType of the parameter so it can be inferred from the value.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.Clone">
            <summary>
            Clones a parameter
            </summary>
            <returns>A new, unassociated SQLiteParameter</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.IsNullable">
            <summary>
            Whether or not the parameter can contain a null value.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.DbType">
            <summary>
            Returns the datatype of the parameter.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.Direction">
            <summary>
            Supports only input parameters.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.ParameterName">
            <summary>
            Returns the parameter name.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.Size">
            <summary>
            Returns the size of the parameter.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.SourceColumn">
            <summary>
            Gets/sets the source column.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.SourceColumnNullMapping">
            <summary>
            Used by DbCommandBuilder to determine the mapping for nullable fields.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.SourceVersion">
            <summary>
            Gets and sets the row version.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameter.Value">
            <summary>
            Gets and sets the parameter value.  If no datatype was specified, the datatype will assume the type from the value given.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ReflectionHelper.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Returns a _private_ Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ReflectionHelper.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Returns a private Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ReflectionHelper.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a _private_ Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">Value to set.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ReflectionHelper.SetPrivateFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Set a private Property Value on a given Object. Uses Reflection.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">the value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the Property is not found</exception>
        </member>
        <member name="T:Microsoft.Windows.Shell.ComStream">
            <summary>
            Wraps an IStream interface pointer from COM into a form consumable by .Net.
            </summary>
            <remarks>
            This implementation is immutable, though it is possible that the underlying
            stream can be changed in another context.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ComStream.#ctor(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Wraps a native IStream interface into a CLR Stream subclass.
            </summary>
            <param name="stream">
            The stream that this object wraps.
            </param>
            <remarks>
            Note:  The parameter is passed by ref.  On successful creation it is
            zeroed out to the caller.  This object becomes responsible for the lifetime
            management of the wrapped IStream.
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.ManagedIStream">
            <summary>
            Wraps a managed stream instance into an interface pointer consumable by COM.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ManagedIStream class with the specified managed Stream object.
            </summary>
            <param name="source">
            The stream that this IStream reference is wrapping.
            </param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Creates a new stream object with its own seek pointer that
            references the same bytes as the original stream. 
            </summary>
            <param name="ppstm">
            When this method returns, contains the new stream object. This parameter is passed uninitialized.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Clone in the MSDN library.
            This class doesn't implement Clone.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Commit(System.Int32)">
            <summary>
            Ensures that any changes made to a stream object that is open in transacted
            mode are reflected in the parent storage. 
            </summary>
            <param name="grfCommitFlags">
            A value that controls how the changes for the stream object are committed. 
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Commit in the MSDN library.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the
            stream to the current seek pointer in another stream. 
            </summary>
            <param name="pstm">
            A reference to the destination stream. 
            </param>
            <param name="cb">
            The number of bytes to copy from the source stream. 
            </param>
            <param name="pcbRead">
            On successful return, contains the actual number of bytes read from the source.
            Note: the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.
            </param>
            <param name="pcbWritten">
            On successful return, contains the actual number of bytes written to the destination.
            Note: the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.
            </param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the stream. 
            </summary>
            <param name="libOffset">
            The byte offset for the beginning of the range. 
            </param>
            <param name="cb">
            The length of the range, in bytes, to restrict.
            </param>
            <param name="dwLockType">
            The requested restrictions on accessing the range.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::LockRegion in the MSDN library.
            This class does not implement LockRegion.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer. 
            </summary>
            <param name="pv">
            When this method returns, contains the data read from the stream. This parameter is passed uninitialized.
            </param>
            <param name="cb">
            The number of bytes to read from the stream object. 
            </param>
            <param name="pcbRead">
            A pointer to a ULONG variable that receives the actual number of bytes read from the stream object.
            </param>
            <remarks>
            For more information, see the existing documentation for ISequentialStream::Read in the MSDN library.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Revert">
            <summary>
            Discards all changes that have been made to a transacted stream since the last Commit call.
            </summary>
            <remarks>
            This class does not implement Revert.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the
            stream, to the end of the stream, or to the current seek pointer.
            </summary>
            <param name="dlibMove">
            The displacement to add to dwOrigin.
            </param>
            <param name="dwOrigin">
            The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file. 
            </param>
            <param name="plibNewPosition">
            On successful return, contains the offset of the seek pointer from the beginning of the stream.
            Note: the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Seek in the MSDN library.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object. 
            </summary>
            <param name="libNewSize">
            The new size of the stream as a number of bytes. 
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::SetSize in the MSDN library.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Retrieves the STATSTG structure for this stream. 
            </summary>
            <param name="pstatstg">
            When this method returns, it contains a STATSTG structure that describes this stream object.
            This parameter is passed uninitialized.
            </param>
            <param name="grfStatFlag">
            Members in the STATSTG structure that this method does not return, thus saving some memory allocation operations. 
            </param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a range of bytes previously restricted with the LockRegion method.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range.
            </param>
            <param name="cb">
            The length, in bytes, of the range to restrict.
            </param>
            <param name="dwLockType">
            The access restrictions previously placed on the range.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::UnlockRegion in the MSDN library.
            This class doesn't implement UnlockRegion.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="pv">
            The buffer to write this stream to.
            </param>
            <param name="cb">
            The number of bytes to write to the stream. 
            </param>
            <param name="pcbWritten">
            On successful return, contains the actual number of bytes written to the stream object. 
            If the caller sets this pointer to null, this method does not provide the actual number
            of bytes written.
            </param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ManagedIStream.Dispose">
            <summary>
            Releases resources controlled by this object.
            </summary>
            <remarks>
            Dispose can be called multiple times, but trying to use the object
            after it has been disposed will generally throw ObjectDisposedExceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.DpiHelper.LogicalPixelsToDevice(System.Windows.Point)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.DpiHelper.DevicePixelsToLogical(System.Windows.Point)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <param name="logicalPoint">A point in the physical coordinate system.</param>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.ModalDialog">
            <summary>
            Provide a modal dialog that can host user-defined UI content.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Instance">
            <summary>
            The singleton instance of ModalDialog.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ModalDialog.ClearMinWidth">
            <summary>
            Clear MinWidth
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ModalDialog.ClearMinHeight">
            <summary>
            Clear MinHeight
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ModalDialog.ClearMaxWidth">
            <summary>
            Clear MaxWidth
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ModalDialog.ClearMaxHeight">
            <summary>
            Clear MaxHeight
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ModalDialog.ShowDialog(System.Windows.UIElement)">
            <summary>
            Show a modal dialog with the content. The UI thread will block until the dialog is closed.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Close(System.Boolean)">
            <summary>
            dialog content should call this method with the proper dialog result to close the dialog. 
            The dialogResult passed here will be returned by ShowDialog method.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Style">
            <summary>
            Dialog Style
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Title">
            <summary>
            Dialog Title
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Icon">
            <summary>
            Dialog Icon
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Sizable">
            <summary>
            Get or set the property to control if the dialog is sizable
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.MinHeight">
            <summary>
            Gets or sets the minimum height constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.MaxHeight">
            <summary>
            Gets or sets the maximum height constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Width">
            <summary>
            Gets or sets the width of the dialog
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Height">
            <summary>
            Gets or sets the height of the dialog
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Top">
            <summary>
            Gets or sets the position of the dialog's top edge, in relation to the desktop. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Left">
            <summary>
            Gets or sets the position of the dialog's left edge, in relation to the desktop. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.ModalDialog.StartupLocation">
            <summary>
            Gets or sets the position of the dialog
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Desktop.ModalDialog.Closed">
            <summary>
             This event will be fired when the window is closed.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.ClipboardAccessType">
            <summary>
            Type of operation on the clipboard.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.ClipboardAccessType.Get">
            <summary>
            Read a value from clipboard.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.ClipboardAccessType.Set">
            <summary>
            Write a value to clipboard.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.BitmapSourceHelper">
            <summary>
            The help class that provides functionalities on BitmapSource
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.BitmapSourceHelper.Save(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapEncoder,System.IO.Stream)">
            <summary>
            Save an instance of BitmapSource using a specified encoder.
            </summary>
            <param name="bitmapSource"></param>
            <param name="encoder"></param>
            <param name="stream"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter">
            <summary>
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.#ctor">
            <overloads>
            This class is just a shell around the DbDataAdapter.  Nothing from DbDataAdapter is overridden here, just a few constructors are defined.
            </overloads>
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.#ctor(Bloomberglp.AppPortalApi.Data.Sql.DbCommand)">
            <summary>
            Constructs a data adapter using the specified select command.
            </summary>
            <param name="cmd">The select command to associate with the adapter.</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.#ctor(System.String,Bloomberglp.AppPortalApi.Data.Sql.DbConnection)">
            <summary>
            Constructs a data adapter with the supplied select command text and associated with the specified connection.
            </summary>
            <param name="commandText">The select command text to associate with the data adapter.</param>
            <param name="connection">The connection to associate with the select command.</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructs a data adapter with the specified select command text, and using the specified database connection string.
            </summary>
            <param name="commandText">The select command text to use to construct a select command.</param>
            <param name="connectionString">A connection string suitable for passing to a new SQLiteConnection, which is associated with the select command.</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.Update(System.Data.DataTable)">
            <summary>
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.RowUpdating">
            <summary>
            Row updating event handler.
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.RowUpdated">
            <summary>
            Row updated event handler.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.SelectCommand">
            <summary>
            Gets/sets the select command for this DataAdapter.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.InsertCommand">
            <summary>
            Gets/sets the insert command for this DataAdapter.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.UpdateCommand">
            <summary>
            Gets/sets the update command for this DataAdapter.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter.DeleteCommand">
            <summary>
            Gets/sets the delete command for this DataAdapter.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpConfigurationManager">
            <summary>
            AppPortal Configuration manager
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)">
            <summary>
            Opens the specified client configuration file as a Configuration object that uses the 
            specified file mapping and user level.
            See ConfigurationManager.OpenMappedExeConfiguration() for details
            </summary>
            <param name="fileMap">An ExeConfigurationFileMap object that references configuration file 
            to use instead of the application default configuration file</param>
            <param name="userLevel">The ConfigurationUserLevel object for which you are opening 
            the configuration</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpConfigurationManager.OpenMappedExeConfigurationCustomSection(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.String)">
            <summary>
            Returns object representing custom section of the configuration file
            </summary>
            <param name="fileMap">An ExeConfigurationFileMap object that references configuration file to use instead 
            of the application default configuration file</param>
            <param name="userLevel">The ConfigurationUserLevel object for which you are opening the configuration</param>
            <param name="section">Custom section name</param>
            <returns>Specified ConfigurationSection object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpConfigurationManager.GetSectionRawXml(System.Configuration.ConfigurationSection)">
            <summary>
            Reads raw section's content (xml)
            </summary>
            <param name="section">Configuration section</param>
            <returns>Xml string.</returns>
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ApplicationAggregateProperties.SCAggregateConnector.AcceptExternalPropertyChanges">
            <summary>
            Starts accepting notifications about property changes
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ApplicationAssociationRegistration">
            <summary>IID_IApplicationAssociationRegistration</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ConnectionPoint">
            <summary>IID_IConnectionPoint</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ConnectionPointContainer">
            <summary>IID_IConnectionPointContainer</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.EnumConnectionPoints">
            <summary>IID_IEnumConnectionPoints</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.EnumConnections">
            <summary>IID_IEnumConnections</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.EnumIdList">
            <summary>IID_IEnumIDList</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.EnumObjects">
            <summary>IID_IEnumObjects</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.FileDialog">
            <summary>IID_IFileDialog</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.FileDialogEvents">
            <summary>IID_IFileDialogEvents</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.FileOpenDialog">
            <summary>IID_IFileOpenDialog</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.FileSaveDialog">
            <summary>IID_IFileSaveDialog</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.HtmlDocument">
            <summary>IID_IHTMLDocument</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.HtmlDocument2">
            <summary>IID_IHTMLDocument2</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ModalWindow">
            <summary>IID_IModalWindow</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ObjectArray">
            <summary>IID_IObjectArray</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ObjectCollection">
            <summary>IID_IObjectCollection</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.PropertyNotifySink">
            <summary>IID_IPropertyNotifySink</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.PropertyStore">
            <summary>IID_IPropertyStore</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ServiceProvider">
            <summary>IID_IServiceProvider</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ShellFolder">
            <summary>IID_IShellFolder</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ShellLink">
            <summary>IID_IShellLink</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ShellItem">
            <summary>IID_IShellItem</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ShellItem2">
            <summary>IID_IShellItem2</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ShellItemArray">
            <summary>IID_IShellItemArray</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.TaskbarList">
            <summary>IID_ITaskbarList</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.TaskbarList2">
            <summary>IID_ITaskbarList2</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.Unknown">
            <summary>IID_IUnknown</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WebBrowser2">
            <summary>IID_IWebBrowser2</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WebBrowserEvents">
            <summary>DIID_DWebBrowserEvents</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WebBrowserEvents2">
            <summary>IID_DWebBrowserEvents2</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICBitmapDecoder">
            <summary>IID_IWICBitmapDecoder</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICBitmapFlipRotator">
            <summary>IID_IWICBitmapFlipRotator</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICBitmapFrameDecode">
            <summary>IID_IWICBitmapFrameDecode</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICBitmap">
            <summary>IID_IWICBitmap</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICBitmapSource">
            <summary>IID_IWICBitmapSource</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICFormatConverter">
            <summary>IID_IWICFormatConverter</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICImagingFactory">
            <summary>IID_IWICImagingFactory</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.WICStream">
            <summary>IID_IWICStream</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ApplicationDestinations">
            <summary>IID_IApplicationDestinations</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ApplicationDocumentLists">
            <summary>IID_IApplicationDocumentLists</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.CustomDestinationList">
            <summary>IID_ICustomDestinationList</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ObjectWithAppUserModelId">
            <summary>IID_IObjectWithAppUserModelID</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.ObjectWithProgId">
            <summary>IID_IObjectWithProgID</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.TaskbarList3">
            <summary>IID_ITaskbarList3</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.IID.TaskbarList4">
            <summary>IID_ITaskbarList4</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SID.SWebBrowserApp">
            <summary>SID_SWebBrowserApp</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.ApplicationAssociationRegistration">
            <summary>CLSID_ApplicationAssociationRegistration</summary>
            <remarks>IID_IApplicationAssociationRegistration</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.DragDropHelper">
            <summary>CLSID_DragDropHelper</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.FileOpenDialog">
            <summary>CLSID_FileOpenDialog</summary>
            <remarks>IID_IFileOpenDialog</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.FileSaveDialog">
            <summary>CLSID_FileSaveDialog</summary>
            <remarks>IID_IFileSaveDialog</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.TaskbarList">
            <summary>CLSID_TaskbarList</summary>
            <remarks>IID_ITaskbarList</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.EnumerableObjectCollection">
            <summary>CLSID_EnumerableObjectCollection</summary>
            <remarks>IID_IEnumObjects.</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.ShellLink">
            <summary>CLSID_ShellLink</summary>
            <remarks>IID_IShellLink</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.WICImagingFactory">
            <summary>CLSID_WICImagingFactory</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.DestinationList">
            <summary>CLSID_DestinationList</summary>
            <remarks>IID_ICustomDestinationList</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.ApplicationDestinations">
            <summary>CLSID_ApplicationDestinations</summary>
            <remarks>IID_IApplicationDestinations</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.CLSID.ApplicationDocumentLists">
            <summary>CLSID_ApplicationDocumentLists</summary>
            <remarks>IID_IApplicationDocumentLists</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._window">
            <summary>The Window that is chrome is being modified.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._hwnd">
            <summary>Underlying HWND for the _window.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._chromeInfo">
            <summary>Object that describes the current modifications being made to the chrome.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._ModifyStyle(Microsoft.Windows.Shell.WS,Microsoft.Windows.Shell.WS)">
            <summary>Add and remove a native WindowStyle from the HWND.</summary>
            <param name="removeStyle">The styles to be removed.  These can be bitwise combined.</param>
            <param name="addStyle">The styles to be added.  These can be bitwise combined.</param>
            <returns>Whether the styles of the HWND were modified as a result of this call.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetHwndState">
            <summary>
            Get the WindowState as the native HWND knows it to be.  This isn't necessarily the same as what Window thinks.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetWindowRect">
            <summary>
            Get the bounding rectangle for the window in physical coordinates.
            </summary>
            <returns>The bounding rectangle for the window.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._UpdateSystemMenu(System.Nullable{System.Windows.WindowState})">
            <summary>
            Update the items in the system menu based on the current, or assumed, WindowState.
            </summary>
            <param name="assumeState">
            The state to assume that the Window is in.  This can be null to query the Window's state.
            </param>
            <remarks>
            We want to update the menu while we have some control over whether the caption will be repainted.
            </remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._HitTestBorders">
            <summary>
            Matrix of the HT values to return when responding to NC window messages.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialogCore.OpenFile">
            <summary>
            Creates a read-write file stream for the filename selected by the user using SaveFileDialog.
            </summary>
            <returns>A read-write file stream for the filename selected by the user using SaveFileDialog.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialogCore.#ctor">
            <summary>
            Initializes a new instance of the SaveFileDialog class.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialogCore.ShowDialog">
            <summary>
            Displays a save file dialog.
            </summary>
            <returns>If the user clicks the OK button of the dialog that is displayed,
            true is returned; otherwise, false is returned.</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SaveFileDialogCore.CreatePrompt">
            <summary>
            Gets or sets a value indicating whether SaveFileDialog prompts the user for
            permission to create a file if the user specifies a file that does not exist.
            </summary>
            <value>A value indicating whether SaveFileDialog prompts the user for
            permission to create a file if the user specifies a file that does not exist.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SaveFileDialogCore.OverwritePrompt">
            <summary>
            Gets or sets a value indicating whether SaveFileDialog displays a warning
            if the user specifies the name of a file that already exists.
            </summary>
            <value>A value indicating whether SaveFileDialog displays a warning
            if the user specifies the name of a file that already exists.</value>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbTransaction">
            <summary> 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbTransaction.Connection">
            <summary>
            The connection associated with this command
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpApplication">
            <summary>
            Encapsulates a Blp App Portal Application.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplication.Shutdown(System.Int32)">
            <summary>
            Shuts down an application that returns the specified exit code
            </summary>
            <param name="exitCode">An integer exit code for an application. The default exit code is 0.</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplication.BeginSetComponentProperties(Bloomberglp.AppPortalApi.SecurityComponentProperties,System.AsyncCallback,System.Object)">
            <summary>
            Sets the security component property values.
            </summary>
            <param name="properties">SecurityComponentProperties object which contains the collection of properties to be updated</param>
            <param name="asyncCallback">Method to be called when setting the component properties operation is complete</param>
            <param name="asyncState">An object that contains state information for this request</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplication.EndSetComponentProperties(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous set component properties request
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.BlpApplication.GetComponentProperties">
             <summary>
            Gets the current component properties
             </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpApplication.Current">
            <summary>
            Get the current application
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpApplication.MainWindow">
            <summary>
            Get the main window of the current application
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpApplication.PromptOnExitByUser">
            <summary>
            This property is deprecated. Please subscribe Closing and Closed events for customized closing behavior.
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.BlpApplication.Closing">
            <summary>
            Occurs directly after user tries to close the application or BlpApplication.Shutdown ia called. 
            It can be handled to cancel window closure.
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.BlpApplication.Closed">
            <summary>
            Occurs when the application is about to clsoe
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.BlpApplication.Exit">
            <summary>
            Obsoleted. Occurs just before an application shuts down, and cannot be canceled. 
            The event will be invoked in Main Window's dispatcher thread.
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.BlpApplication.ComponentPropertyChanged">
            <summary>
            Occurs when a componentproperty, such as security hotspot has changed.  
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.BlpApplication.ComponentChanged">
            <summary>
            Occurs when there is any change in components such as security hotspot
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.DragDrop">
            <summary>
            The wrapper of System.Windows.DragDrop
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.DragDrop.DoDragDrop(System.Windows.DependencyObject,System.Object,System.Windows.DragDropEffects)">
            <summary>
            Initiates a drag-and-drop operation.
            </summary>
            <param name="dragSource">A reference to the dependency object that is the source of the data being dragged.</param>
            <param name="data">A data object that contains the data being dragged.</param>
            <param name="allowedEffects">One of the DragDropEffects values that specifies permitted effects of the drag-and-drop operation.</param>
            <returns>One of the DragDropEffects values that specifies the final effect that was performed during the drag-and-drop operation.</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbExtensions">
            <summary>
             Represents <see cref="T:System.Data.Common.DbConnection"/> extension methods.
            </summary>
             <remarks>
             This class provides utility methods to functionality not directly exposed by DbConnection class:
             <list type="bullet">
             <item><description>Encrypt open database</description></item>
             <item><description>Un-encrypt open database</description></item>
             <item><description>Physically delete database including all OS files that constitute the database</description></item>
             <item><description>Check for a database existence</description></item>
             </list>
             </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbExtensions.DbExists(System.Data.Common.DbConnection)">
            <summary>
             Extends <see cref="T:System.Data.Common.DbConnection"/> class. Checks for database existence.
            </summary>
            <param name="db">A valid database connection object.</param>
            <exception cref="T:System.InvalidOperationException">Can be thrown during the DataSource validation</exception>
            <returns>true - if database exists</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbExtensions.DropDatabase(System.Data.Common.DbConnection)">
            <summary>
             Extends the <see cref="T:System.Data.Common.DbConnection"/> class. 
             Closes the connection if currently open and deletes database file(s).
            </summary>
            <param name="db">A valid database connection object.</param>
            <returns>true - if database has been dropped</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbExtensions.EncryptDatabase(System.Data.Common.DbConnection,System.String)">
            <summary>
             Encrypt database with password.
            </summary>
            <remarks>Database must be opened.</remarks>
            <param name="db">Database connection instance of <see cref="T:System.Data.Common.DbConnection"/>.</param>
            <param name="password">New password</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the database is not open</exception>
            <exception cref="T:System.ArgumentNullException">Password cannot be empty or null.</exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbExtensions.DecryptDatabase(System.Data.Common.DbConnection)">
            <summary>
             Decrypt database.
            </summary>
            <param name="db">Database connection instance of <see cref="T:System.Data.Common.DbConnection"/>.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if database is not open</exception>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbDataReader">
            <summary>
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbDataReader.Close">
            <summary>
            Closes the data-reader, potentially closing the connection as well, if CommandBehavior.CloseConnection was specified.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder">
            <summary>
            SQLite implementation of DbCommandBuilder.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.#ctor(Bloomberglp.AppPortalApi.Data.Sql.DbDataAdapter)">
            <summary>
            Initializes the command builder and associates it with the specified data adapter.
            </summary>
            <param name="adp"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            Minimal amount of parameter processing.  Primarily sets the DbType for the parameter equal to the provider type in the schema.
            </summary>
            <param name="parameter">The parameter to use in applying custom behaviors to a row</param>
            <param name="row">The row to apply the parameter to</param>
            <param name="statementType">The type of statement</param>
            <param name="whereClause">Whether the application of the parameter is part of a WHERE clause</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetParameterName(System.String)">
            <summary>
            Returns a valid named parameter.
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            Returns a named parameter for the given ordinal.
            </summary>
            <param name="parameterOrdinal">The i of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            Returns a placeholder character for the specified parameter i.
            </summary>
            <param name="parameterOrdinal">The index of the parameter to provide a placeholder for</param>
            <returns>Returns a named parameter</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the handler for receiving row updating events.  Used by the DbCommandBuilder to autogenerate SQL
            statements that may not have previously been generated.
            </summary>
            <param name="adapter">A data adapter to receive events on.</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetDeleteCommand">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database.
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetUpdateCommand">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database.
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetInsertCommand">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database.
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Places brackets around an identifier
            </summary>
            <param name="unquotedIdentifier">The identifier to quote</param>
            <returns>The bracketed identifier</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Removes brackets around an identifier
            </summary>
            <param name="quotedIdentifier">The quoted (bracketed) identifier</param>
            <returns>The undecorated identifier</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
            <summary>
            Override helper, which can help the base command builder choose the right keys for the given query.
            </summary>
            <param name="sourceCommand"></param>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbCommandBuilder.DataAdapter">
            <summary>
            Gets/sets the DataAdapter for this CommandBuilder
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpAppPortalException">
            <summary>
             BlpAppPortalException is an Application Portal specific exception.
             Its purpose is to unify the exception reporting format and abstract from implementation details.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpAppPortalException.BlpErrorType">
            <summary>
             Gets the Internal API's error type.
            </summary>
             <value>The Internal API's error type.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpAppPortalException.BlpErrorCode">
            <summary>
             Gets the Internal API's error code.
            </summary>
             <value>The Internal API's error code.</value>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tracer.WinTrvTime.Initialize(System.Object)">
            <param name="service">Object on which late binding method invocation will be perfomed</param>
        </member>
        <member name="T:Bloomberg.SmartClient.ClientServices.ServiceProviderWrapper">
            <summary>
            Summary description for ServiceProviderWrapper.
            </summary>
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ServiceProviderWrapper.#ctor(System.Object)">
            <summary>
            Initializes new instance
            </summary>
            <param name="svcProvider">Object on which late binding method invocation will be perfomed</param>
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ServiceProviderWrapper.GetService(System.String)">
            <summary>
            Get specified service from unmanaged host.
            </summary>
            <param name="name">Name of the service</param>
            <returns>Object representing the service, otherwise null</returns>
        </member>
        <member name="P:Bloomberg.SmartClient.ClientServices.ServiceProviderWrapper.ServiceProvider">
            <summary>
            Wrapper service provider object.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.Verify">
            <summary>
            A static class for retail validated assertions.
            Instead of breaking into the debugger an exception is thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsApartmentState(System.Threading.ApartmentState,System.String)">
            <summary>
            Ensures that the current thread's apartment state is what is expected.
            </summary>
            <param name="requiredState">
            The required apartment state for the current thread.
            </param>
            <param name="message">
            The message string for the exception to be thrown if the state is invalid.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the requiredState.
            </exception>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsNeitherNullNorEmpty(System.String,System.String)">
            <summary>
            Ensures that an argument is neither null nor empty.
            </summary>
            <param name="value">The string to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsNeitherNullNorWhitespace(System.String,System.String)">
            <summary>
            Ensures that an argument is neither null nor does it consist only of whitespace.
            </summary>
            <param name="value">The string to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsNotDefault``1(``0,System.String)">
            <summary>Verifies that an argument is not null.</summary>
            <typeparam name="T">Type of the object to validate.  Must be a class.</typeparam>
            <param name="obj">The object to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsNotNull``1(``0,System.String)">
            <summary>Verifies that an argument is not null.</summary>
            <typeparam name="T">Type of the object to validate.  Must be a class.</typeparam>
            <param name="obj">The object to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsNull``1(``0,System.String)">
            <summary>Verifies that an argument is null.</summary>
            <typeparam name="T">Type of the object to validate.  Must be a class.</typeparam>
            <param name="obj">The object to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is true.  Throws an ArgumentException if it is not.
            </summary>
            <param name="statement">The statement to be verified as true.</param>
            <param name="name">Name of the parameter to include in the ArgumentException.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is true.  Throws an ArgumentException if it is not.
            </summary>
            <param name="statement">The statement to be verified as true.</param>
            <param name="name">Name of the parameter to include in the ArgumentException.</param>
            <param name="message">The message to include in the ArgumentException.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Verify.BoundedInteger(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it is not within the range.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
        </member>
        <member name="T:Microsoft.Windows.Shell.AL">
            <summary>ASSOCIATIONLEVEL, AL_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.AT">
            <summary>ASSOCIATIONTYPE, AT_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.FDAP">
            <summary>FileDialog AddPlace options.  FDAP_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.FOS">
            <summary>IFileDialog options.  FOS_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.FDEOR">
            <summary>FDE_OVERWRITE_RESPONSE.  FDEOR_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.FDESVR">
            <summary>FDE_SHAREVIOLATION_RESPONSE.  FDESVR_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SIATTRIBFLAGS">
            <summary>ShellItem attribute flags.  SIATTRIBFLAGS_*</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.STPF">
            <summary>
            Flags for SetTabProperties.  STPF_*
            </summary>
            <remarks>The native enum was called STPFLAG.</remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.TBPF">
            <summary>
            Flags for Setting Taskbar Progress state.  TBPF_*
            </summary>
            <remarks>
            The native enum was called TBPFLAG.
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.THB">
            <summary>
            THUMBBUTTON mask.  THB_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.THBF">
            <summary>
            THUMBBUTTON flags.  THBF_*
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.GPS">
            <summary>
            GetPropertyStoreFlags.  GPS_*.
            </summary>
            <remarks>
            These are new for Vista, but are used in downlevel components
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.KDC">
            <summary>
            KNOWNDESTCATEGORY.  KDC_*
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.CANCOPY">
            <summary>Objects can be copied</summary>
            <remarks>DROPEFFECT_COPY</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.CANMOVE">
            <summary>Objects can be moved</summary>
            <remarks>DROPEFFECT_MOVE</remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.CANLINK">
            <summary>Objects can be linked</summary>
            <remarks>
            DROPEFFECT_LINK.
            
            If this bit is set on an item in the shell folder, a
            'Create Shortcut' menu item will be added to the File
            menu and context menus for the item.  If the user selects
            that command, your IContextMenu::InvokeCommand() will be called
            with 'link'.
            That flag will also be used to determine if 'Create Shortcut'
            should be added when the item in your folder is dragged to another
            folder.
            </remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.STORAGE">
            <summary>supports BindToObject(IID_IStorage)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.CANRENAME">
            <summary>Objects can be renamed</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.CANDELETE">
            <summary>Objects can be deleted</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.HASPROPSHEET">
            <summary>Objects have property sheets</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.DROPTARGET">
            <summary>Objects are drop target</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.ENCRYPTED">
            <summary>Object is encrypted (use alt color)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.ISSLOW">
            <summary>'Slow' object</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.GHOSTED">
            <summary>Ghosted icon</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.LINK">
            <summary>Shortcut (link)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.SHARE">
            <summary>Shared</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.READONLY">
            <summary>Read-only</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.HIDDEN">
            <summary> Hidden object</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.FILESYSANCESTOR">
            <summary> May contain children with SFGAO_FILESYSTEM</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.FOLDER">
            <summary>Support BindToObject(IID_IShellFolder)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.FILESYSTEM">
            <summary>Is a win32 file system object (file/folder/root)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.HASSUBFOLDER">
            <summary>May contain children with SFGAO_FOLDER (may be slow)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.VALIDATE">
            <summary>Invalidate cached information (may be slow)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.REMOVABLE">
            <summary>Is this removeable media?</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.COMPRESSED">
            <summary> Object is compressed (use alt color)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.BROWSABLE">
            <summary>Supports IShellFolder, but only implements CreateViewObject() (non-folder view)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.NONENUMERATED">
            <summary>Is a non-enumerated object (should be hidden)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.NEWCONTENT">
            <summary>Should show bold in explorer tree</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.CANMONIKER">
            <summary>Obsolete</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.HASSTORAGE">
            <summary>Obsolete</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.STREAM">
            <summary>Supports BindToObject(IID_IStream)</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.STORAGEANCESTOR">
            <summary>May contain children with SFGAO_STORAGE or SFGAO_STREAM</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.STORAGECAPMASK">
            <summary>For determining storage capabilities, ie for open/save semantics</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SFGAO.PKEYSFGAOMASK">
            <summary>
            Attributes that are masked out for PKEY_SFGAOFlags because they are considered
            to cause slow calculations or lack context
            (SFGAO_VALIDATE | SFGAO_ISSLOW | SFGAO_HASSUBFOLDER and others)
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SHCONTF">
            <summary>
            IShellFolder::EnumObjects grfFlags bits.  Also called SHCONT
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SHGDN">
            <summary>
            IShellFolder::GetDisplayNameOf/SetNameOf uFlags.  Also called SHGDNF.
            </summary>
            <remarks>
            For compatibility with SIGDN, these bits must all sit in the LOW word.
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.SICHINT">
            <summary>
            SHELLITEMCOMPAREHINTF.  SICHINT_*.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SICHINT.DISPLAY">
            <summary>iOrder based on display in a folder view</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SICHINT.ALLFIELDS">
            <summary>exact instance compare</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.SICHINT.CANONICAL">
            <summary>iOrder based on canonical name (better performance)</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.SIGDN">
            <summary>
            ShellItem enum.  SIGDN_*.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.STR_GPS">
             <summary>
             STR_GPS_*
             </summary>
             <remarks>
             When requesting a property store through IShellFolder, you can specify the equivalent of
             GPS_DEFAULT by passing in a null IBindCtx parameter.
            
             You can specify the equivalent of GPS_READWRITE by passing a mode of STGM_READWRITE | STGM_EXCLUSIVE
             in the bind context
            
             Here are the string versions of GPS_ flags, passed to IShellFolder::BindToObject() via IBindCtx::RegisterObjectParam()
             These flags are valid when requesting an IPropertySetStorage or IPropertyStore handler
            
             The meaning of these flags are described above.
            
             There is no STR_ equivalent for GPS_TEMPORARY because temporary property stores
             are provided by IShellItem2 only -- not by the underlying IShellFolder.
             </remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.THUMBBUTTON.THBN_CLICKED">
            <summary>
            WPARAM value for a THUMBBUTTON being clicked.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY._fmtid">
            <summary>fmtid</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY._pid">
            <summary>pid</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY.Title">
            <summary>PKEY_Title</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY.AppUserModel_ID">
            <summary>PKEY_AppUserModel_ID</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY.AppUserModel_IsDestListSeparator">
            <summary>PKEY_AppUserModel_IsDestListSeparator</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY.AppUserModel_RelaunchCommand">
            <summary>PKEY_AppUserModel_RelaunchCommand</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY.AppUserModel_RelaunchDisplayNameResource">
            <summary>PKEY_AppUserModel_RelaunchDisplayNameResource</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.PKEY.AppUserModel_RelaunchIconResource">
            <summary>PKEY_AppUserModel_RelaunchIconResource</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.IObjectArray">
            <summary>Unknown Object Array</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.IShellItem">
            <summary>
            Shell Namespace helper
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.IShellItem2">
            <summary>
            Shell Namespace helper 2
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.ITaskbarList.HrInit">
            <summary>
            This function must be called first to validate use of other members.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.ITaskbarList.AddTab(System.IntPtr)">
            <summary>
            This function adds a tab for hwnd to the taskbar.
            </summary>
            <param name="hwnd">The HWND for which to add the tab.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ITaskbarList.DeleteTab(System.IntPtr)">
            <summary>
            This function deletes a tab for hwnd from the taskbar.
            </summary>
            <param name="hwnd">The HWND for which the tab is to be deleted.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ITaskbarList.ActivateTab(System.IntPtr)">
            <summary>
            This function activates the tab associated with hwnd on the taskbar.
            </summary>
            <param name="hwnd">The HWND for which the tab is to be actuvated.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ITaskbarList.SetActiveAlt(System.IntPtr)">
            <summary>
            This function marks hwnd in the taskbar as the active tab.
            </summary>
            <param name="hwnd">The HWND to activate.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.ITaskbarList2.MarkFullscreenWindow(System.IntPtr,System.Boolean)">
            <summary>
            Marks a window as full-screen.
            </summary>
            <param name="hwnd">The handle of the window to be marked.</param>
            <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
            <remarks>
            Setting the value of fFullscreen to true, the Shell treats this window as a full-screen window, and the taskbar
            is moved to the bottom of the z-order when this window is active.  Setting the value of fFullscreen to false
            removes the full-screen marking, but <i>does not</i> cause the Shell to treat the window as though it were
            definitely not full-screen.  With a false fFullscreen value, the Shell depends on its automatic detection facility
            to specify how the window should be treated, possibly still flagging the window as full-screen.
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.IApplicationDocumentLists">
            <summary>
            Allows an application to retrieve the most recent and frequent documents opened in that app, as reported via SHAddToRecentDocs
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.IApplicationDocumentLists.SetAppID(System.String)">
            <summary>
            Set the App User Model ID for the application retrieving this list.  If an AppID is not provided via this method,
            the system will use a heuristically determined ID.  This method must be called before GetList. 
            </summary>
            <param name="pszAppID">App Id.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.IApplicationDocumentLists.GetList(Microsoft.Windows.Shell.APPDOCLISTTYPE,System.UInt32,System.Guid@)">
            <summary>
            Retrieve an IEnumObjects or IObjectArray for IShellItems and/or IShellLinks. 
            Items may appear in both the frequent and recent lists.  
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Windows.Shell.IObjectWithAppUserModelId">
            <summary>
            Provides access to the App User Model ID on objects supporting this value.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.IObjectWithProgId">
            <summary>
            Provides access to the ProgID associated with an object 
            </summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.Assert">
            <summary>A static class for verifying assumptions.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.Evaluate(Microsoft.Windows.Shell.Assert.EvaluateFunction)">
            <summary>
            Executes the specified argument.
            </summary>
            <param name="argument">The function to execute.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.Equals``1(``0,``0)">
            <summary>Obsolete: Use Standard.Assert.AreEqual instead of Assert.Equals</summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.AreEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are equal.  The assertion fails if they are not.
            </summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are not equal.  The assertion fails if they are.
            </summary>
            <typeparam name="T">The generic type to compare for inequality.</typeparam>
            <param name="notExpected">The first generic type data to compare.  This is is the value that is not expected.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.Implies(System.Boolean,System.Boolean)">
            <summary>
            Verifies that if the specified condition is true, then so is the result.
            The assertion fails if the condition is true but the result is false.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="result">
            A second Boolean statement. If the first was true, then so must this be.
            If the first statement was false then the value of this is ignored.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.Implies(System.Boolean,Microsoft.Windows.Shell.Assert.ImplicationFunction)">
            <summary>
            Lazy evaluation overload.  Verifies that if a condition is true, then so is a secondary value.
            </summary>
            <param name="condition">The conditional value.</param>
            <param name="result">A function to be evaluated for truth if the condition argument is true.</param>
            <remarks>
            This overload only evaluates the result if the first condition is true.
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsNeitherNullNorEmpty(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not empty.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsNeitherNullNorWhitespace(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not purely whitespace.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsNotNull``1(``0)">
            <summary>
            Verifies the specified value is not null.  The assertion fails if it is.
            </summary>
            <typeparam name="T">The generic reference type.</typeparam>
            <param name="value">The value to check for nullness.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsFalse(System.Boolean)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <param name="message">The message to display if the condition is <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsTrue(System.Boolean)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <param name="message">The message to write in case the condition is <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.Fail">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.Fail(System.String)">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <param name="message">The message to display if this function is executed.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsNull``1(``0)">
            <summary>
            Verifies that the specified object is null.  The assertion fails if it is not.
            </summary>
            <param name="item">The item to verify is null.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.BoundedDoubleInc(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it is not.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.BoundedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it is not.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.Assert.IsApartmentState(System.Threading.ApartmentState)">
            <summary>
            Verify the current thread's apartment state is what is expected.  The assertion fails if it is not
            </summary>
            <param name="expectedState">
            The expected apartment state for the current thread.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="T:Microsoft.Windows.Shell.Assert.EvaluateFunction">
            <summary>A function signature for Assert.Evaluate.</summary>
        </member>
        <member name="T:Microsoft.Windows.Shell.Assert.ImplicationFunction">
            <summary>A function signature for Assert.Implies.</summary>
            <returns>Returns the truth of a predicate.</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ComponentProperty">
            <summary>
            Encapsulate security component property and its value 
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.ComponentProperty.#ctor(System.String,System.String)">
            <summary>
            </summary>
            <param name="name">Name of the component (e.g Security 1)</param>
            <param name="value">Value of the component (e.g IBM Equity)</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.ComponentProperty.ToString">
            <summary>
            Override  displays Name and its value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ComponentProperty.Name">
            <summary>
            Name of the propery
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.ComponentProperty.Value">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Chrome.NamespaceDoc">
            <summary>
            App Portal Chrome functionality.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome">
             <summary>
             Contains properties to customize appearance and behavior of App Portal Chrome
             </summary>
             <example>
             This example shows how to add an icon to the title bar.
             <code>
            void SetTaskbarIcon(string assemblyName, string iconName)
            {
            	Uri uri = new Uri(
            		"pack://application:,,,/" + 
            		assemblyName + 
            		";component/" + 
            		iconName,          
            		UriKind.RelativeOrAbsolute);
            	AppPortalChrome.SetIcon(this, BitmapFrame.Create(uri));
            }    
             </code>
             </example>    
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.IconProperty">
            <summary>
            Icon to display with app window
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.GetIcon(System.Windows.FrameworkElement)">
            <summary>
            Get icon associated with app window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.SetIcon(System.Windows.FrameworkElement,System.Windows.Media.ImageSource)">
            <summary>
            Set icon associated with app window
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.InitialSizeProperty">
            <summary>
            Initial size of with app window
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.GetInitialSize(System.Windows.FrameworkElement)">
            <summary>
            Gets the initial size of the app window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.SetInitialSize(System.Windows.FrameworkElement,System.Windows.Size)">
            <summary>
            Sets the initial size of the app window
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.InitialLocationProperty">
            <summary>
            The intial location of the app window
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.GetInitialLocation(System.Windows.FrameworkElement)">
            <summary>
            Gets the initial location of the app window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.SetInitialLocation(System.Windows.FrameworkElement,System.Windows.Point)">
            <summary>
            Sets the initial location of the app window
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.GetWindowPosition(System.Windows.DependencyObject)">
            <summary>
            Gets the current location of the app window
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.SetWindowPosition(System.Windows.DependencyObject,System.Double,System.Double)">
            <summary>
            Sets the current location of the app window
            </summary>
            <param name="obj"></param>
            <param name="xPos"></param>
            <param name="yPos"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.GetWindowSize(System.Windows.DependencyObject)">
            <summary>
            Gets the current size of the app window
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Chrome.AppPortalChrome.SetWindowSize(System.Windows.DependencyObject,System.Double,System.Double)">
            <summary>
            Sets the current size of the app window
            </summary>
            <param name="obj"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.Clipboard">
             <summary>
             Provides access to the system clipboard for data storage/retrieval and a set of data formats.
             </summary>
             <example>
             The following code shows how to store and retrieve data from the system clipboard.
             <code title="Clipboard Generic Usage" description="" lang="CS">
             public class ClipboardDemoClass
             {
                 [STAThread]
                 public static void Main(string[] args)
                 {
                     TestClipboardFormat("Text", "foo");
            
                     var csvData = "1,2,3\n4,5,6";
                     TestClipboardFormat("CSV", csvData);
            
                     var csvHeader = String.Join(",", new string[]
                     {
                         "Ticker",
                         "Name",
                         "Price",
                         "NetChange",
                         "PercentChange",
                     });
                     var csvFields = String.Join(",", new string[]
                     {
                         "GOOG",
                         "Google Inc.",
                         "610.94",
                         "-7.25",
                         "1.19%",
                     });
                     csvData = String.Format("{0}\n{1}", csvHeader, csvFields);
                     TestClipboardFormat("CSV", csvData);
            
                     TestClipboardFormat("HTML Format", "<html></html>");
                 }
            
                 private static void TestClipboardFormat(string format, string inData)
                 {
                     Assert.IsTrue(Clipboard.IsFormatValid(format));
                     Clipboard.SetData(format, inData);
            
                     var contains = Clipboard.ContainsData(format);
                     Assert.IsTrue(contains);
            
                     var outData = Clipboard.GetData(format);
                     Assert.AreEqual(inData, outData);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.Clipboard.GetData(System.String)">
            <summary>
            Retrieves data in a specified format from the Clipboard.
            </summary>
            <param name="format">
            The string that specifies the format of the data to retrieve.
            </param>
            <returns>
            An object that contains the data in the specified format, or null if the data
            is unavailable in the specified format.
            </returns>
            <exception caption="" cref="T:System.ArgumentNullException">format is null</exception>
            <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">
            The caller does not have permission to get the clipboard data in the
            given format.
            </exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.Clipboard.SetData(System.String,System.Object)">
            <summary>
            Stores the specified data on the Clipboard in the specified format.
            </summary>
            <param name="format">
            The string that specifies the format to use to store the data.
            </param>
            <param name="data">
            An object representing the data to store on the Clipboard.
            </param>
            <remarks>
            This method adds data with auto-conversion enabled if the corresponding
            data format is FileDrop or Bitmap. Otherwise, auto-conversion is disabled.
            </remarks>
            <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">
            The caller does not have permission to set the clipboard data in the
            given format.
            </exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.Clipboard.ContainsData(System.String)">
            <summary>
            Queries the Clipboard for the presence of data in a specified data format.
            </summary>
            <param name="format">
            The format of the data to look for.
            </param>
            <returns>
            true if data in the specified format is available on the Clipboard;
            otherwise, false. See Remarks.
            </returns>
            <remarks>
            A query for the data format Bitmap or FileDrop will return true if the data
            can be automatically converted to the specified data format. For other data
            formats, this method returns true only if the specified format is available
            natively on the Clipboard.
            </remarks>
            <exception cref="T:System.ArgumentNullException">format is null</exception>
            <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">
            The caller does not have permission to query the clipboard for the
            given format.
            </exception>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.Clipboard.IsFormatValid(System.String)">
            <summary>
             Checks if format is recognized by the API.
            </summary>
            <param name="format">
            The string that specifies the format to validate.
            </param>
            <returns>
            <list type="bullet">
              <item>true - string is recognized as a clipboard format name</item>
              <item>false - string represents invalid name of clipboard format</item>
            </list>
            </returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.PageOrientation">
            <summary>
            Specifies how pages of content are oriented on print media.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.PageOrientation.Unknown">
            <summary>
            The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema. 
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.PageOrientation.Landscape">
            <summary>
            Content of the imageable area is rotated on the page 90 degrees counterclockwise from standard (portrait) orientation.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.PageOrientation.Portrait">
            <summary>
            Standard orientation. 
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.PageOrientation.ReverseLandscape">
            <summary>
            Content of the imageable area is rotated on the page 90 degrees clockwise from standard (portrait) orientation.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.PageOrientation.ReversePortrait">
            <summary>
            Content of the imageable area is upside down relative to standard (portrait) orientation.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.SafePrintTicket">
            <summary>
            Defines the settings of a print job.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SafePrintTicket.PageOrientation">
            <summary>
            Gets or sets the value indicating how the page content is oriented for printing.
            </summary>
            <value>The <see cref="P:Bloomberglp.AppPortalApi.Desktop.SafePrintTicket.PageOrientation"/> value.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set
            the property to a value that is not in the <see cref="P:Bloomberglp.AppPortalApi.Desktop.SafePrintTicket.PageOrientation"/> enumeration.</exception>
            <remarks>
            A null value for this property means that this feature setting is not specified.
            For more information see <see cref="T:System.Printing.PrintTicket"/> documentation.
            </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialogCore.OpenFile">
            <summary>
            Opens a read-only stream for the file that is selected by the user using OpenFileDialog.
            </summary>
            <returns>A read-only stream for the file that is selected by the user using OpenFileDialog.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialogCore.OpenFiles">
            <summary>
            Creates an array that contains one read-only stream for
            each file selected by the user using OpenFileDialog.
            </summary>
            <returns>An array that contains one read-only stream for
            each file selected by the user using OpenFileDialog.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialogCore.#ctor">
            <summary>
            Initializes a new instance of the OpenFileDialog class.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialogCore.Multiselect">
            <summary>
            Gets or sets an option indicating whether OpenFileDialog allows users to select multiple files.
            </summary>
            <value>An option indicating whether OpenFileDialog allows users to select multiple files.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialogCore.ReadOnlyChecked">
            <summary>
            Gets or sets a value indicating whether the read-only check box displayed by OpenFileDialog is selected. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialogCore.ShowReadOnly">
            <summary>
            Gets or sets a value indicating whether OpenFileDialog contains a read-only check box. 
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.DialogWindow">
            <summary>
            Interaction logic for DialogWindow.xaml.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.DialogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbException">
            <summary>
            The exception that is thrown when the database returns a warning or error. This class cannot be inherited. 
            </summary>
            <remarks>
            <para>This class is created whenever the .NET Framework Data Provider for 
            AppPortal database encounters an error generated from the database.</para>
            <para>The following is general information on handling exceptions. 
            Your code should catch exceptions to prevent the application from crashing and 
            to allow displaying a relevant error message to the user. You can use database 
            transactions to ensure that the data is consistent regardless of what happens 
            in the client application (including a crash). Features like System.Transaction.
            TransactionScope or the BeginTransaction method ensure consistent data regardless 
            of exceptions raised by a provider. Transactions can fail so catch failures
             and retry the transaction.
            </para>
            <para>In addition to the provider-specific errors, .NET Framework data provider 
            types can raise .NET Framework exceptions such as System.OutOfMemoryException and 
            System.Threading.ThreadAbortException. Recovery from these exceptions may not be possible.
            </para>
            <para>Bad input can cause a .NET Framework data provider type to raise an exception such 
            as System.ArgumentException or System.IndexOutOfRangeException. Calling a method at 
            the wrong time can raise System.InvalidOperationException.
            </para>
            <para>So, in general, write an exception handler that catches the provider 
            specific exception as well as exceptions from the common language runtime. These can be layered as follows:
            <code>
                try {
                    // code here
                }
                catch (SqlException odbcEx) {
                    // Handle more specific SqlException exception here.
                }
                catch (Exception ex) {
                    // Handle generic ones here.
                }
            </code>
            Or:
            <code>
                Try {
                    // code here
                }
                catch (Exception ex) {
                    if (ex is SqlException) {
                      // Handle more specific SqlException exception here.
                    }
                    else {
                     // Handle generic ones here.
                    }
                }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbException.#ctor(System.Data.SQLite.SQLiteException)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbException.#ctor(System.Int32,System.String)">
            <summary>
            Public constructor for generating a SQLite error given the base error code.
            </summary>
            <param name="errorCode">The SQLite error code to report</param>
            <param name="extendedInformation">Extra text to go along with the error message text</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbException.#ctor(System.String)">
            <summary>
            Various public constructors that just pass along to the base Exception.
            </summary>
            <param name="message">Passed verbatim to Exception</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbException.#ctor">
            <summary>
            Various public constructors that just pass along to the base Exception.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbException.#ctor(System.String,System.Exception)">
            <summary>
            Various public constructors that just pass along to the base Exception.
            <param name="message">Passed to Exception</param>
            <param name="innerException">Passed to Exception</param>
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbException.GetStockErrorMessage(System.Int32,System.String)">
            <summary>
            Initializes the exception class with the SQLite error code.
            </summary>
            <param name="errorCode">The SQLite error code</param>
            <param name="errorMessage">A detailed error message</param>
            <returns>An error message string</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode">
            <summary>
            SQLite error codes
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Ok">
            <summary>
            Successful result
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Error">
            <summary>
            SQL error or missing database
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Internal">
            <summary>
            Internal logic error in SQLite
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Perm">
            <summary>
            Access permission denied
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Abort">
            <summary>
            Callback routine requested an abort
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Busy">
            <summary>
            The database file is locked
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Locked">
            <summary>
            A table in the database is locked
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.NoMem">
            <summary>
            A malloc() failed
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.ReadOnly">
            <summary>
            Attempt to write a readonly database
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Interrupt">
            <summary>
            Operation terminated by sqlite3_interrupt()
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.IoErr">
            <summary>
            Some kind of disk I/O error occurred
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Corrupt">
            <summary>
            The database disk image is malformed
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.NotFound">
            <summary>
            Unknown opcode in sqlite3_file_control()
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Full">
            <summary>
            Insertion failed because database is full
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.CantOpen">
            <summary>
            Unable to open the database file
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Protocol">
            <summary>
            Database lock protocol error
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Empty">
            <summary>
            Database is empty
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Schema">
            <summary>
            The database schema changed
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.TooBig">
            <summary>
            String or BLOB exceeds size limit
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Constraint">
            <summary>
            Abort due to constraint violation
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Mismatch">
            <summary>
            Data type mismatch
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Misuse">
            <summary>
            Library used incorrectly
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.NoLfs">
            <summary>
            Uses OS features not supported on host
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Auth">
            <summary>
            Authorization denied
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Format">
            <summary>
            Auxiliary database format error
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Range">
            <summary>
            2nd parameter to sqlite3_bind out of range
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.NotADb">
            <summary>
            File opened that is not a database file
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Notice">
            <summary>
            Notifications from sqlite3_log()
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Warning">
            <summary>
            Warnings from sqlite3_log()
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Row">
            <summary>
            sqlite3_step() has another row ready
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbErrorCode.Done">
            <summary>
            sqlite3_step() has finished executing
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.AppPortalToolTipService.Register">
            <summary>
            Intercept ToolTipService.FindToolTip RoutedEvent. This will give us the chance to replace built-in PopupControlService with PortalPopupControlService
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.AppPortalToolTipService.UnRegisterToolTipService">
            <summary>
            This code is extemely hacky. The purpose is to remove ToolTipService.OnFindToolTip from FindToolTipEvent's handlers list so that AppPortalToolTipService
            becomes the only handler of that event. This makes sure ToolTipService doesn't call into PopupControlService.
            This method is .NET version dependent. So far it works on .NET 3.5 SP1 and .NET 4.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.AppPortalToolTipService.OnFindToolTip(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This is called when FindToolTipEvent is raised from AppPortalPopupControlService or PopupControlService.
            Here when the closest element with ToolTip is found, we intentionally set TargetElement and KeepCurrentActive
            to cheat on PopupControlService so that it thinks there's no ToolTip. Thus no ToolTip will be opened by
            PopupControlService.
            In order fo AppPortalPopupControlService to open ToolTips, we transfer TargetElement and KeepCurrentActive to 
            FindToolTipResultTable. They act like Attacned Properties on RoutedEventArgs.
            This method is dependent on .NET version. So far it works on .NET 3.5 SP1 and .NET 4.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.Controls.ComboBox">
            <summary>
            The wrapper of System.Windows.Controls.ComboBox. WPF ComboBox contains code path
            that requires unmanaged code permission. The purpose of this class is to bypass
            the security check on WPF ComboBox.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.Controls.ComboBox.IsDropDownOpen">
            <summary>
            Gets or sets a value that indicates whether the drop-down for a combo box is currently open.
            </summary>
        </member>
        <member name="T:Bloomberg.SmartClient.ClientServices.ScMessage">
            <summary>
            Smart Client (layer 3) message
            </summary>
        </member>
        <member name="T:Bloomberg.SmartClient.ClientServices.ProcessSCMessageWrapper">
            <summary>
            Summary description for ProcessCSMessageWrapper.
            </summary>
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ProcessSCMessageWrapper.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="propertyChange"></param>
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ProcessSCMessageWrapper.ProcessMessage(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Bloomberg.SmartClient.ClientServices.ProcessSCMessageWrapper.ProcessSCMessage">
            <summary>
            Wrapper service provider object
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.WebDocument">
            <summary>
             Creates an object capable of opening a document in an external viewer.
            </summary>
             <remarks>
             <para>
             <list type="bullet">
             <item>Documents are identified by URLs.</item>
             <item>The API uses the terminal's communication channels to access information from Internet.</item>
             <item>No query string or URL fragments are allowed in the URL. </item>
             <item>There are constraints on communication protocols and content types:</item>
             </list>
             </para>
             <para>Allowed content types:
                 <list type="bullet">
                 <item>
                     <term>application/pdf</term><description>PDF Document</description>
                 </item>
                 <item>
                     <term>application/rtf</term><description>Rich Text Format file</description>
                 </item>
                 <item>
                     <term>text/plain</term><description>Plain Text</description>
                 </item>
                 <item>
                     <term>image/gif</term><description>GIF image file</description>
                 </item>
                 <item>
                     <term>image/jpeg</term><description>JPEG image file</description>
                 </item>
                 <item>
                     <term>image/x-png</term><description>PNG image</description>
                 </item>
                 </list>
             </para>
            
             <para>Allowed protocols:
                 <list type="bullet">
                 <item>
                     <term>http://</term><description>HTTP Protocol</description>
                 </item>
                 <item>
                     <term>https://</term><description>HTTPS Protocol</description>
                 </item>
                 </list>
             </para>
             
             <para>Allowed file extensions in URLs: 
                 <list type="bullet">
                 <item>
                     .pdf, .rtf, .txt, .gif, .jpg, .png
                 </item>
                 </list>
             </para>
             </remarks>
             <example>
             The following example shows a function registered for a link click event (WPF).
             It changes the cursor to the "hour glass" and downloads a file.
             When the file is downloaded and opened in an external viewer, the cursor changes back to normal.
             <code>
             // An example of an event processing routine
             private void HyperlinkRequestNavigateOpenDocumentAsync(object sender, RequestNavigateEventArgs ea)
             {
                 // Get document
                 var doc = new WebDocument {AllowMultipleDocumentViews = false};
            
                 // Arm to fire when document is downloaded.
                 doc.OpenDocumentCompleted += (o, e) =>
                 {
                     Trace.WriteLine("doc.IsDocumentOpening: " + doc.IsDocumentOpening);
                     Trace.WriteLine("doc.IsDocumentAlreadyOpen: " + doc.IsDocumentAlreadyOpen);
                     Mouse.OverrideCursor = null;
                     doc.Dispose();
                 };
            
                 // Change cursor, for example, while downloading and opening.
                 Mouse.OverrideCursor = Cursors.Wait;
                 // Start document download, and do not block.
                 try
                 {
                     doc.OpenDocumentAsync(ea.Uri);                
                 }
                 catch (BlpAppPortalException ex)
                 {
                     var messageBoxText = ex.Message;
                     const string caption = "Web document demo.";
                     const MessageBoxButton button = MessageBoxButton.OK;
                     const MessageBoxImage icon = MessageBoxImage.Warning;
                     MessageBox.Show(messageBoxText, caption, button, icon);
                 }
                 ea.Handled = true;
             }
             </code>
             This example does exactly what the previous one does, only synchronously.
             <code>
              // An example of an event processing routine
              private void HyperlinkRequestNavigateOpenDocument(object sender, RequestNavigateEventArgs ea)
              {
                  //Get document
                  WebDocument doc = null;
                  try
                  {
                      Mouse.OverrideCursor = Cursors.Wait;
                      doc = new WebDocument {AllowMultipleDocumentViews = false};
            
                      // request document and block
                      doc.OpenDocument(ea.Uri);
                      ea.Handled = true;
                  }
                  catch(BlpAppPortalException ex)
                  {                
                      var messageBoxText = ex.Message;
                      const string caption = "Web document demo.";
                      const MessageBoxButton button = MessageBoxButton.OK;
                      const MessageBoxImage icon = MessageBoxImage.Warning;
                      MessageBox.Show(messageBoxText, caption, button, icon);
                  }
                  finally
                  {
                      if (doc != null) doc.Dispose();
                      Mouse.OverrideCursor = null;
                  }
              }
             </code>
             </example>    
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocument(System.Uri)">
             <summary>
              Open document in external viewer.
             </summary>
             <param name="fileUrl">URL of the document.</param>
             <remarks>
              Before file is downloaded:
              <list type="number"><item>The URL is validated for permitted protocols. Currently only the HTTP and HTTPS are allowed.</item></list>
              When file is received the following is performed before function returns:
              <list type="number"><item>Content type is validated.</item>
             <item>File is saved locally with appropriate file extension derived from content type.</item>
             <item>Control is transferred to Windows shell to open this
              document with default program, registered for the extension.</item></list></remarks>
             <exception caption="BlpAppPortalException" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Provides exception reason and internal error codes</exception>
             <example>
             The following example shows a function registered for a link click event (WPF). It changes the cursor to 
             the "hour glass" and downloads a file. When the file is
             downloaded and opened in an external viewer, the cursor changes back to normal.
             <code title="OpenDocument Usage" description="" lang="CS">
              // An example of an event processing routine
              private void HyperlinkRequestNavigateOpenDocument(object sender, RequestNavigateEventArgs ea)
              {
                  //Get document
                  WebDocument doc = null;
                  try
                  {
                      Mouse.OverrideCursor = Cursors.Wait;
                      doc = new WebDocument {AllowMultipleDocumentViews = false};
            
                      // request document and block
                      doc.OpenDocument(ea.Uri);
                      ea.Handled = true;
                  }
                  catch(BlpAppPortalException ex)
                  {                
                      var messageBoxText = ex.Message;
                      const string caption = "Web document demo.";
                      const MessageBoxButton button = MessageBoxButton.OK;
                      const MessageBoxImage icon = MessageBoxImage.Warning;
                      MessageBox.Show(messageBoxText, caption, button, icon);
                  }
                  finally
                  {
                      if (doc != null) doc.Dispose();
                      Mouse.OverrideCursor = null;
                  }
              }
            </code></example>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Commonly thrown when the document is already open in another window.</exception>        
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.ReadDocument(System.Uri)">
            <summary>
             Reads document content.
            </summary>
            <param name="fileUrl">URL of the document.</param>
            <remarks>
             Before file is downloaded:
             <list type="number"><item>The URL is validated for permitted protocols. Currently only the HTTP and HTTPS are allowed.</item></list>
             When file is received the following is performed before function returns:
             <list type="number"><item>Content type is validated.</item><item>The file is saved locally with appropriate file extension derived from content type.</item><item>Byte stream is returned</item></list></remarks>
            <returns>Stream of bytes</returns>
            <exception caption="BlpAppPortalException" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Provides exception reason and internal error codes</exception>
            <example>
            The following example shows a function registered for a link click event (WPF). It changes the cursor to "hour glass" and downloads a file. When the file is
            downloaded and opened in an external viewer, the cursor changes back to normal.
            <code title="ReadDocument Usage" description="" lang="CS">
            //Get doc
            using (var doc = new WebDocument())
            {
                doc.AllowMultipleDocumentViews = true;
                Mouse.OverrideCursor = Cursors.Wait;
                // request document and block
             
                var s =  doc.ReadDocument(ea.Uri);
                s.Position = 0;
                var bytes = new byte[s.Length];
                var numBytesToRead = (int)s.Length;
                var numBytesRead = 0;
                while (numBytesToRead &gt; 0)
                {
                    var n = s.Read(bytes, numBytesRead, numBytesToRead);
                    // The end of the file is reached.
                    if (n == 0)
                    {
                        break;
                    }
                    numBytesRead += n;
                    numBytesToRead -= n;
                }
                s.Close(); // or doc.EndReadDocument();
            }</code></example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocumentAsync(System.Uri)">
             <summary>
              Open document in external viewer asynchronously.
              Client is notified through <see cref="E:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocumentCompleted"/> event.
             </summary>
             <param name="fileUrl">URL of the document.</param>
             <remarks>
              Before file is downloaded:
              <list type="number"><item>The URL is validated for permitted protocols. Currently only the HTTP and HTTPS are allowed.</item></list>
              When file is received the following is performed:
              <list type="number"><item>Content type is validated. </item>
             <item>File is saved locally with appropriate file extension derived from content type.</item>
             <item>Control is transferred to Windows shell to open this
              document with default program, registered for the extension.</item></list></remarks>
             <exception caption="BlpAppPortalException" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Provides exception reason and internal error codes</exception>
             <example>
              The following example shows a function registered for a link click event (WPF).
              It changes the cursor to "hour glass" and downloads a file.
              When the file is downloaded and opened in an external viewer, the cursor changes back to normal.
              
             <code title="OpenDocumentAsync Usage" description="" lang="CS">
             // An example of an event processing routine
             private void HyperlinkRequestNavigateOpenDocumentAsync(object sender, RequestNavigateEventArgs ea)
             {
                 // Get document
                 var doc = new WebDocument {AllowMultipleDocumentViews = false};
            
                 // Arm to fire when document is downloaded.
                 doc.OpenDocumentCompleted += (o, e) =&gt;
                 {
                     Trace.WriteLine("doc.IsDocumentOpening: " + doc.IsDocumentOpening);
                     Trace.WriteLine("doc.IsDocumentAlreadyOpen: " + doc.IsDocumentAlreadyOpen);
                     Mouse.OverrideCursor = null;
                     doc.Dispose();
                 };
            
                 // Change cursor, for example, while downloading and opening.
                 Mouse.OverrideCursor = Cursors.Wait;
                 // Start document download, and do not block.
                 try
                 {
                     doc.OpenDocumentAsync(ea.Uri);                
                 }
                 catch (BlpAppPortalException ex)
                 {
                     var messageBoxText = ex.Message;
                     const string caption = "Web document demo.";
                     const MessageBoxButton button = MessageBoxButton.OK;
                     const MessageBoxImage icon = MessageBoxImage.Warning;
                     MessageBox.Show(messageBoxText, caption, button, icon);
                 }
                 ea.Handled = true;
             }
             </code></example>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Commonly thrown when the document is already open in another window.</exception>        
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.CancelOpenDocumentAsync">
            <summary>
             Cancels asynchronous open document request.
            </summary>
            <remarks>Callback function registered for <see cref="E:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocumentCompleted"/> notification can check 
            <c>AsyncCompletedEventArgs</c> for cancellation status.</remarks>
            <example>
            Code starts a document download then cancels it.
            <code title="CancelOpenDocumentAsync Usage" description="" lang="CS">
            var doc = new WebDocument{AllowMultipleDocumentViews = true};
             
            // Arm event(s)
            doc.OpenDocumentCompleted += (o, e) =&gt;
            {
                Trace.WriteLine("doc.IsDocumentOpening: " + doc.IsDocumentOpening);
                Trace.WriteLine("doc.IsDocumentAlreadyOpen: " + doc.IsDocumentAlreadyOpen);
                Mouse.OverrideCursor = null;
                doc.Dispose();
            };
            // Request document asynchronously
             
            Mouse.OverrideCursor = Cursors.Wait;
            doc.OpenDocumentAsync(new Url("http://site.com/document.html"));
             
            //****
            // Do some useful stuff here ...
            //****
             
            // We do not need the document anymore, user want to quit application
            // for example
                doc.CancelOpenDocumentAsync();
            </code></example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.EndReadDocument">
            <summary>Cleans after document read</summary>
            <remarks>Closes underlying file descriptor, and sets <see cref="P:Bloomberglp.AppPortalApi.Desktop.WebDocument.IsDocumentOpening">IsDocumentOpening</see> to false.</remarks>
            <exception caption="BlpAppPortalException" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Provides exception reason and internal error codes</exception>
            <example>
            	<para>...</para>
            	<para>doc.EndReadDocument();</para>
            	<para>...</para>
            	<code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.#ctor">
             <summary>Downloads and opens a document in an external viewer.</summary>
             <remarks>
             	<para>
             		<list type="bullet">
             			<item>Documents are identified by URLs.</item>
             			<item>API uses terminal's communication channels to access information from Internet</item>
             			<item>There are constraints on communication protocols and content types:</item>
             		</list>
             	</para>
             <para>Allowed content types:
                 <list type="bullet">
                 <item>
                     <term>application/pdf</term><description>PDF Document</description>
                 </item>
                 <item>
                     <term>application/vnd.ms-powerpoint</term><description>Microsoft PowerPoint</description>
                 </item>
                 <item>
                     <term>application/rtf</term><description>Rich Text Format file</description>
                 </item>
                 <item>
                     <term>text/plain</term><description>Plain Text</description>
                 </item>
                 <item>
                     <term>image/gif</term><description>GIF image file</description>
                 </item>
                 <item>
                     <term>image/jpeg</term><description>JPEG image file</description>
                 </item>
                 <item>
                     <term>image/x-png</term><description>PNG image</description>
                 </item>
                 </list>
             </para>
             	<para>Allowed protocols:
                  <list type="bullet"><item><term>http://</term><description>HTTP Protocol</description></item></list>
                  <list type="bullet"><item><term>https://</term><description>HTTPS Protocol</description></item></list>
                 </para>
             </remarks>
             <example>
             The following example shows a function registered for a link click event (WPF). It changes the cursor to tje "hour glass" and downloads a file. When the file is
             downloaded and opened in an external viewer, the cursor changes back to normal. This example does exactly what the previous one does, only synchronously.
             <code title="OpenDocumentAsync Usage" description="" lang="CS">
             // An example of an event processing routine
             private void HyperlinkRequestNavigateOpenDocumentAsync(object sender, RequestNavigateEventArgs ea)
             {
                 // Get document
                 var doc = new WebDocument {AllowMultipleDocumentViews = false};
            
                 // Arm to fire when document is downloaded.
                 doc.OpenDocumentCompleted += (o, e) =>
                 {
                     Trace.WriteLine("doc.IsDocumentOpening: " + doc.IsDocumentOpening);
                     Trace.WriteLine("doc.IsDocumentAlreadyOpen: " + doc.IsDocumentAlreadyOpen);
                     Mouse.OverrideCursor = null;
                     doc.Dispose();
                 };
            
                 // Change cursor, for example, while downloading and opening.
                 Mouse.OverrideCursor = Cursors.Wait;
                 // Start document download, and do not block.
                 try
                 {
                     doc.OpenDocumentAsync(ea.Uri);                
                 }
                 catch (BlpAppPortalException ex)
                 {
                     var messageBoxText = ex.Message;
                     const string caption = "Web document demo.";
                     const MessageBoxButton button = MessageBoxButton.OK;
                     const MessageBoxImage icon = MessageBoxImage.Warning;
                     MessageBox.Show(messageBoxText, caption, button, icon);
                 }
                 ea.Handled = true;
             }
             </code>
             This example does exactly what the previous one does, only synchronously.
             <code title="OpenDocument Usage" description="" lang="CS">
              // An example of an event processing routine
              private void HyperlinkRequestNavigateOpenDocument(object sender, RequestNavigateEventArgs ea)
              {
                  //Get document
                  WebDocument doc = null;
                  try
                  {
                      Mouse.OverrideCursor = Cursors.Wait;
                      doc = new WebDocument {AllowMultipleDocumentViews = false};
            
                      // request document and block
                      doc.OpenDocument(ea.Uri);
                      ea.Handled = true;
                  }
                  catch(BlpAppPortalException ex)
                  {                
                      var messageBoxText = ex.Message;
                      const string caption = "Web document demo.";
                      const MessageBoxButton button = MessageBoxButton.OK;
                      const MessageBoxImage icon = MessageBoxImage.Warning;
                      MessageBox.Show(messageBoxText, caption, button, icon);
                  }
                  finally
                  {
                      if (doc != null) doc.Dispose();
                      Mouse.OverrideCursor = null;
                  }
              }
             </code>
             </example>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Desktop.WebDocument.DownloadProgressChanged">
            <summary>
             Notifies when download progress changed.
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocumentCompleted">
            <summary>
             Notifies when document has been opened.
            </summary>        
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.WebDocument.AllowMultipleDocumentViews">
            <summary>
             <list type="bullet">
             <item><term><c>false</c></term>
             <description>Do nothing if the same document is already open.</description></item>
             <item><term><c>true</c></term>
             <description>Open the same document in another window. Default.</description></item>
             </list>
            </summary>
             <value><c>true</c> if the same document can open in another window; otherwise <c>false</c>.</value>
             <remarks>
             When property is set to <c>false</c> - the shell will not open
             document again if it is already open in another window.
             </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.WebDocument.IsDocumentAlreadyOpen">
            <summary>
             Returns <c>true</c> if the document is already open in another window.
            </summary>
             <value><c>true</c> if the document is already open in another window; otherwise <c>false</c>.</value>
             <remarks>
             <para>Important! The value of this property is only relevant when attempt to open document has been made.</para>
             <para>It is set in <see cref="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocument(System.Uri)"/> or <see cref="M:Bloomberglp.AppPortalApi.Desktop.WebDocument.OpenDocumentAsync(System.Uri)"/>
             When API sees that the same file exists and locked then it decides that file is open in another window.</para>
             </remarks>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.WebDocument.IsDocumentOpening">
            <summary>
             If the document download or read operation is in progress then <c>true</c>.
            </summary>
             <value><c>true</c> if the document download operation is in progress; otherwise <c>false</c>.</value>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.NamespaceDoc">
            <summary>
            This namespace contains the API to persist application's configuration/state data.
            <para>Serialized data is saved on network and can be reused
            by terminal sessions on different computers for the same user.</para>
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService">
            <summary>
            Public facade for the Persistence API.
            </summary>
             <remarks>
             <para>Serialized data is internally identified by Object ID, Context name, Bloomberg's internal vendor id, and logged (terminal) user ID. 
             The vendor ID and user ID are injected by infrastructure in the cloud.
             <list type="bullet">
             <item><term>Object ID</term>
             <description>The unique identifier of data blob within a given namespace.</description>
             </item>
             <item><term>Context</term>
             <description>A logical container that provides context for the Object IDs.
             Same object ID can exist in different contexts.
             <b>Use your company name as the prefix for a context name.</b></description>
             </item>
             <item><term>Default context</term>
             <description>Internal application id is used as the context name.</description>
             </item>
             </list>
             </para>
             <para> The persistence API provides one way to save data and two
             ways to retrieve data.
             <list type="table">
             <listheader><term>Save data</term><description> </description></listheader>
             <item><term>Strong type serialization</term>
             <description>Object can be serialized (deep copy) only by providing
             strong typed object reference.
             See <see cref="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.SaveData``1(System.String,``0)"/>&gt; for details.</description>
             </item>
             </list>
             <list type="table">
             <listheader><term>Get data</term><description> </description></listheader>
             <item><term>Strong type de-serialization</term>
             <description>A new instance of the type is created by de-serialization process.
             See <see cref="!:PersistenceContext.ReadObject&lt;T&gt;"/> for details.</description>
             </item>
             <item><term>Plain text</term>
             <description>De-serialized as JSON into string.
             See <see cref="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.GetDataAsString(System.String)"/>.</description>
             </item>
             </list>
             </para>
             <para>
             Data serialization rules.
             <list type="number">
             <item><description>
             Root object's (the one that is passed to 
             <see cref="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceContext.SaveData``1(System.String,``0)"/>) type can only derive from <see cref="T:System.Object"/>
             or <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/>
             </description>
             </item>
             <item><description>Types of serialized property or field can be only of the following: 
             primitive types, nested types of root type;
             array, list, dictionary of primitive types or root's nested classes.
             </description></item>
             <item><description>What is getting serialized. By default public fields and properties
             (POCOs - plain old CLR objects). It can customized by using WCF
             data contract serializer attributes.
             Types Supported by the Data Contract Serializer (http://msdn.microsoft.com/en-us/library/ms731923.aspx).
             </description>
             </item>
             </list>
             </para>
             <para>
             Data contract versioning.
             </para>
             <para>
             This implementation supports guidelines from MSDN's "Versioning When Schema Validation Is Not Required"
             (http://msdn.microsoft.com/en-us/library/ms733832.aspx).
             </para>
             <para>Basic rules:</para>
             <list type="bullet">
             <item>Do not change properties/fields names.</item>
             <item>Do not change properties/fields types.</item>
             <item>Do not delete properties/fields.</item>
             <item>Do not attempt to version data contracts by type inheritance.</item>
             <item>Starting with the first version of a data contract, always inherit
             from <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/> to enable round-tripping. <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/> 
             implements IExtensibleDataObject interface.
             See "Forward-Compatible Data Contracts" (http://msdn.microsoft.com/en-us/library/ms731083.aspx) </item>
             </list>
             </remarks>
             <example>
             This example implements data round trip: save then retrieve. "Data"'s type should
             satisfy guidelines from "Data serialization rules" in the namespace documentation.
             <code>
             // Save data then get it from Bloomberg server cloud
             public static T ContentRoundTrip&lt;T&gt;(string nameSpace, string objectId, T data)
             {
                 // Persists content of "data" uniquely identifiable by objectId 
                 // and nameSpace on Bloomberg server cloud
                 PersistenceService.DefaultContext.SaveData(objectId, data, nameSpace);
            
                 // Get content of "data" uniquely identifiable by objectId 
                 // and nameSpace from Bloomberg server cloud
                 return PersistenceService.DefaultContext.ReadObject&lt;T&gt;(objectId, nameSpace);
             }
             </code>
             </example>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.DefaultContext">
            <summary>
             Default context is set to internal Application Portal's application ID
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.GetNamedContext(System.String)">
            <summary>
             Establishes (if does not exist) and returns named context for persistent object identifiers.
             Different object with the same identifier can co-exist in different contexts.
            </summary>
            <param name="contextName">context name</param>
            <returns>A context object. It is used to save and get data.</returns>
            <remarks>It is a good practice to use organization/department names as prefixes to context name.</remarks>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.MinValueUtc">
            <summary>The minimum value for Coordinated Universal Time (UTC), which is used to initialize all <see cref="T:System.DateTime"/> variables. Otherwise, the JSON serializer will fail for zone
            &gt;= GMT + 1.</summary>
            <remarks>
            	<para>Don't leave  DataTime members un-initialized! It will cause an exception in current Microsoft JSON serialization implementation.</para>
            	<para>Instead, initialize DataTime members with MinValueUtc.</para>
            </remarks>
            <example>
            <code title="PersistenceService.MinValueUtc Usage" description="" lang="CS">
            public class ExampleClass
            {
                ...
                public DateTime Dt = PersistenceService.MinValueUtc;
                ...
            }</code>
            </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.SaveData``1(System.String,``0,System.String)">
             <summary>
              Persists an instance of type on the Bloomberg network.
             </summary>
             <param name="objectId">The unique identifier of data blob within a given Namespace.</param>
             <param name="data">Reference to object that is being saved (can be be of value tape also).</param>
             <param name="nameSpace">
              A logical container that provides context for the Object IDs
              Same object ID can exist in different namespaces.
              Use your company name as the prefix for a namespace identifier.
              If <c>nameSpace</c> is null or omitted then the application ID is used.
              </param>
             <typeparam name="T">Type of object is being saved (see "Data serialization rules" bellow).
              </typeparam>
             <remarks>
             	<para>Data serialization rules.</para>
             	<list type="number">
             		<item>Root object's (the one that is passed to PersistenceService.SaveData&amp;lt;T&amp;gt;) type can only derive from <see cref="T:System.Object"/> or <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/></item>
             		<item>Types of serialized property or field can be only of the following: primitive types, nested types of root type; array, list, dictionary of primitive
                 types or root's nested classes.</item>
             		<item>What is getting serialized. By default public fields and properties (POCOs - plain old CLR objects). It can customized by using WCF data contract
                 serializer attributes. Types Supported by the Data Contract Serializer (http://msdn.microsoft.com/en-us/library/ms731923.aspx).</item>
             	</list>
             	<para></para>
             </remarks>
             <exception caption="" cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be saved properly on the network.</exception>
             <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data does not confirm to sterilization rules.</exception>
             <example>
              Save custom application data. Data is strongly typed!
              <c>ViewerDataSettings</c> class represents an application configuration
              and state data as self contained object
              <c>TestDataViewerSettingsSample.FillWithSample1</c> instantiates and
              populates <c>ViewerDataSettings</c> with test data.
              
             <code title="Storage of Custom App Data" description="" lang="CS">
             class Program
             {
                 static void Main(string[] args)
                 {
                     //Prepare test data
                     var data = TestDataViewerSettingsSample.FillWithSample1();
              
                     //Save blob of data with a key and application nameSpace
                     PersistenceService.SaveData("ThisApplicationStateKey", data);
                 }
             }
            
             // Root class, it's content will be used to save.
             public sealed class ViewerDataSettings
             {
                 // An abstract class to demonstrate inheritance
                 // inside self contained root class "schema"
                 public abstract class AliasEntry
                 {
                     public string AliasName;
                     public string RealName;
                 }
                 // these types will be validated by the serializer -
                 // derive from nested class of the root class.
                 public class FileAlias : AliasEntry { }
                 public class TerminalAlias : AliasEntry { }
                 // Another nested abstract lass 
                 public abstract class BookmarkNode
                 {
                     public int NodeId;
                     public int ParentId;
                 }
                 // Class inherits from root's nested class.
                 public class BookmarkEntry : BookmarkNode
                 {
                     public string Name;
                     public TerminalAlias Terminal;
                     public FileAlias Log;
                     public DateTime Created;
                     public DateTime Accessed;
                 }
                 // Class inherits from root's nested class.
                 public class BookmarkFolder : BookmarkNode
                 {
                     public string FolderName;
                     public List&lt;BookmarkFolder&gt; SubFolders = new List&lt;BookmarkFolder&gt;();
                     public List&lt;BookmarkEntry&gt; Bookmarks = new List&lt;BookmarkEntry&gt;();
                 }
                 // Example of a nested class
                 public class ViewHistoryEntry
                 {
                     public TerminalAlias Terminal;
                     public FileAlias LogFile;
                     public DateTime LastUsed;
                 }
              
                 // Example of a nested struct
                 public struct AppPosition
                 {
                     public double Top;
                     public double Bottom;
                     public double Right;
                     public double Left;
                 }
                 // Example of a member of root class.
                 public BookmarkFolder BookmarkRoot = new BookmarkFolder();
              
                 // Example of a Dictionary member - allowed by the serializer.
                 public Dictionary&lt;string, string&gt; FileAliasMap = new Dictionary&lt;string, string&gt;();
                 public Dictionary&lt;string, string&gt; TerminalAliasMap = new Dictionary&lt;string, string&gt;();
                 // Example of a Dictionary member - allowed by the serializer.
                 public List&lt;ViewHistoryEntry&gt; ViewHistory = new List&lt;ViewHistoryEntry&gt;();
                 // Another member of root class - fro completeness.
                 public AppPosition LastAppPosition;
             }
            
             public static class TestDataViewerSettingsSample
             {
                 private static int _nextId = -1;
                 public static ViewerDataSettings FillWithSample1()
                 {
                     var sample = new ViewerDataSettings
                     {
                         LastAppPosition = new ViewerDataSettings.AppPosition
                                             {
                                                 Top = 1,
                                                 Bottom = 800,
                                                 Left = 1,
                                                 Right = 800
                                             },
                         FileAliasMap = new Dictionary&lt;string, string&gt;
                                            {
                                               {"Bbcomm","Bcomm.log"},
                                               {"Hits","bbsmarthosthit.log"}
                                            },
                         TerminalAliasMap =
                             {
                                 {"Old PC","163249"},
                                 {"WS","565333"}
                             },
                         ViewHistory = new List&lt;ViewerDataSettings.ViewHistoryEntry&gt;
                                           {
                                               new ViewerDataSettings.ViewHistoryEntry
                                                   {
                                                       Terminal = new ViewerDataSettings.TerminalAlias
                                                                      {
                                                                          RealName = "163249",
                                                                          AliasName = "Old PC"
                                                                      },
                                                       LogFile = new ViewerDataSettings.FileAlias
                                                                     {
                                                                          RealName = "app_12345.log",
                                                                          AliasName = "progid1"
                                                                     },
                                                       LastUsed = DateTime.Now
                                                   },
                                               new ViewerDataSettings.ViewHistoryEntry
                                                   {
                                                       Terminal = new ViewerDataSettings.TerminalAlias
                                                                      {
                                                                          RealName = "163249",
                                                                          AliasName = "Old PC"
                                                                      },
                                                       LogFile = new ViewerDataSettings.FileAlias
                                                                     {
                                                                          RealName = "app_54321.log",
                                                                          AliasName = "progid2"
                                                                     },
                                                       LastUsed = DateTime.Now
                                                   }
                                           },
                         BookmarkRoot = new ViewerDataSettings.BookmarkFolder
                             {
                                 ParentId = -1,
                                 FolderName = "RootFolder",
                                 Bookmarks = new List&lt;ViewerDataSettings.BookmarkEntry&gt;
                                 {
                                     new ViewerDataSettings.BookmarkEntry
                                     {
                                         Name = "Bookmark_0_0",
                                         Terminal = new ViewerDataSettings.TerminalAlias
                                                 {
                                                     RealName = "Terminal_Realname_0_0",
                                                     AliasName = "Terminal_Alias_0_0"
                                                 },
                                         Log = new ViewerDataSettings.FileAlias
                                                 {
                                                     RealName = "Log_Realname_0_0",
                                                     AliasName = "Log_Alias_0_0"
                                                 },
                                         Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                         Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                     },
                                     new ViewerDataSettings.BookmarkEntry
                                     {
                                         Name = "Bookmark_0_0",
                                         Terminal = new ViewerDataSettings.TerminalAlias
                                                 {
                                                     RealName = "Terminal_Realname_0_1",
                                                     AliasName = "Terminal_Alias_0_1"
                                                 },
                                         Log = new ViewerDataSettings.FileAlias
                                                 {
                                                     RealName = "Log_Realname_0_1",
                                                     AliasName = "Log_Alias_0_1"
                                                 },
                                         Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                         Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                     }
                                 },   
                                 SubFolders = new List&lt;ViewerDataSettings.BookmarkFolder&gt;
                                 {
                                       new ViewerDataSettings.BookmarkFolder
                                         {
                                             ParentId = 0,
                                             FolderName = "SubFolder_1",
                                             Bookmarks = new List&lt;ViewerDataSettings.BookmarkEntry&gt;
                                             {
                                                 new ViewerDataSettings.BookmarkEntry
                                                 {
                                                     Name = "Bookmark_0_0",
                                                     Terminal = new ViewerDataSettings.TerminalAlias
                                                             {
                                                                 RealName = "Terminal_Realname_1_0",
                                                                 AliasName = "Terminal_Alias_1_0"
                                                             },
                                                     Log = new ViewerDataSettings.FileAlias
                                                             {
                                                                 RealName = "Log_Realname_1_0",
                                                                 AliasName = "Log_Alias_1_0"
                                                             },
                                                     Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                                     Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                                 },
                                                 new ViewerDataSettings.BookmarkEntry
                                                 {
                                                     Name = "Bookmark_0_0",
                                                     Terminal = new ViewerDataSettings.TerminalAlias
                                                             {
                                                                 RealName = "Terminal_Realname_1_1",
                                                                 AliasName = "Terminal_Alias_1_1"
                                                             },
                                                     Log = new ViewerDataSettings.FileAlias
                                                             {
                                                                 RealName = "Log_Realname_1_1",
                                                                 AliasName = "Log_Alias_1_1"
                                                             },
                                                     Created = DateTime.Now.Subtract(TimeSpan.FromDays(-10)),
                                                     Accessed = DateTime.Now.Subtract(TimeSpan.FromDays(-10))
                                                 }                                      
                                             }               
                                         }
                                 }                    
                             }
                     };
                     var id = -1;
                     SetParents(sample.BookmarkRoot, id);
                     return sample;
                 }
                 private static void SetParents(ViewerDataSettings.BookmarkFolder node, int parentId)
                 {
                     node.ParentId = parentId;
                     node.NodeId = ++_nextId;
                     foreach (var f in node.Bookmarks)
                     {
                         f.ParentId = node.NodeId;
                         f.NodeId = ++_nextId;
                     }
                     foreach (var c in node.SubFolders)
                     {
                         SetParents(c, node.NodeId);
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.GetData``1(System.String,System.String)">
            <summary>
             De-serializes an instance of object from persistent storage.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
            <param name="nameSpace">
             A logical container that provides context for the Object IDs
             Same object ID can exist in different namespaces.
             Use your company name as the prefix for a namespace identifier.
             If <c>nameSpace</c> is null or omitted then the application ID is used.
             </param>
            <typeparam name="T">Data type of de-serialized data. Type should be compatible with the type
             used to serialize data. See "Basic rules of type compatibility" bellow.</typeparam>
            <returns>Strongly typed data, that is de-serialized form a persistence storage.</returns>
             <exception cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be retrieved properly from the network.</exception>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data does not confirm to sterilization rules.</exception>
             <remarks>
             <para>See <see cref="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.SaveData``1(System.String,``0,System.String)"/> for data serialization rules</para>
             <para>Type compatibility rules:</para>
             <list type="bullet">
             <item>Do not change properties/fields names.</item>
             <item>Do not change properties/fields types.</item>
             <item>Do not delete properties/fields.</item>
             <item>Do not attempt to version data contracts by type inheritance.</item>
             <item>Starting with the first version of a data contract, always inherit
             from <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/> to enable round-tripping. <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.ExtensibleDataObject"/>
             implements IExtensibleDataObject interface. 
             See "Forward-Compatible Data Contracts" (http://msdn.microsoft.com/en-us/library/ms731083.aspx) </item>
             <item>Use guidelines from MSDN's "Versioning When Schema Validation Is Not Required"
             (http://msdn.microsoft.com/en-us/library/ms733832.aspx).</item>
             </list>        
             </remarks>
             <example>This example creates an instance of <c>ViewerDataSettings</c> from previously saved data.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    //Get blob of data with a key and application nameSpace into an instance of type
                    var data = PersistenceService.ReadObject&lt;ViewerDataSettings&gt;("ThisApplicationStateKey");
                }
            }
            
                // Root class, it's content will be used to save.
                public sealed class ViewerDataSettings
                {
                    // An abstract class to demonstrate inheritance
                    // inside self contained root class "schema"
                    public abstract class AliasEntry
                    {
                        public string AliasName;
                        public string RealName;
                    }
            
                    // these types will be validated by the serializer -
                    // derive from nested class of the root class.
                    public class FileAlias : AliasEntry { }
                    public class TerminalAlias : AliasEntry { }
            
                    // Another nested abstract lass 
                    public abstract class BookmarkNode
                    {
                        public int NodeId;
                        public int ParentId;
                    }
            
                    // Class inherits from root's nested class.
                    public class BookmarkEntry : BookmarkNode
                    {
                        public string Name;
                        public TerminalAlias Terminal;
                        public FileAlias Log;
                        public DateTime Created;
                        public DateTime Accessed;
                    }
            
                    // Class inherits from root's nested class.
                    public class BookmarkFolder : BookmarkNode
                    {
                        public string FolderName;
                        public List&lt;BookmarkFolder&gt; SubFolders = new List&lt;BookmarkFolder&gt;();
                        public List&lt;BookmarkEntry&gt; Bookmarks = new List&lt;BookmarkEntry&gt;();
                    }
            
                    // Example of a nested class
                    public class ViewHistoryEntry
                    {
                        public TerminalAlias Terminal;
                        public FileAlias LogFile;
                        public DateTime LastUsed;
                    }
             
                    // Example of a nested struct
                    public struct AppPosition
                    {
                        public double Top;
                        public double Bottom;
                        public double Right;
                        public double Left;
                    }
            
                    // Example of a member of root class.
                    public BookmarkFolder BookmarkRoot = new BookmarkFolder();
             
                    // Example of a Dictionary member - allowed by the serializer.
                    public Dictionary&lt;string, string&gt; FileAliasMap = new Dictionary&lt;string, string&gt;();
                    public Dictionary&lt;string, string&gt; TerminalAliasMap = new Dictionary&lt;string, string&gt;();
            
                    // Example of a Dictionary member - allowed by the serializer.
                    public List&lt;ViewHistoryEntry&gt; ViewHistory = new List&lt;ViewHistoryEntry&gt;();
            
                    // Another member of root class - fro completeness.
                    public AppPosition LastAppPosition;
                }
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.GetDataAsDictionary(System.String,System.String)">
            <summary>
             De-serializes an instance of object from persistent storage into hierarchical representation of object 
             using data dictionary and primitive types.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
            <param name="nameSpace">
             A logical container that provides context for the Object IDs
             Same object ID can exist in different namespaces.
             Use your company name as the prefix for a namespace identifier.
             If <c>nameSpace</c> is null or omitted then the application ID is used.
             </param>
            <returns>Returns <c>DataElement</c> - root object of hierarchical representation of object
             using data dictionary and primitive types</returns>
             <exception cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be retrieved properly from the network.</exception>
             <remarks>See <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.DataElement"/> class for usage examples </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.GetDataAsString(System.String,System.String)">
             <summary>De-serializes an instance of object as raw JSON. Intended to be used for debugging, or when a type the data was serialized from does not exists or is not
             compatible with the original anymore.</summary>
             <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
             <param name="nameSpace">
              A logical container that provides context for the Object IDs
              Same object ID can exist in different namespaces.
              Use your company name as the prefix for a namespace identifier.
              If <c>nameSpace</c> is null or omitted then the application ID is used.
              </param>
             <remarks>Internal format (JSON) subject to change in future versions!</remarks>
             <returns>Internal object representation as string. Currently it is JSON.</returns>
             <exception caption="" cref="T:System.ArgumentException">Root ID cannot be null.</exception>
             <exception caption="" cref="T:Bloomberglp.AppPortalApi.BlpAppPortalException">Raised when data cannot be retrieved properly from the network.</exception>
             <example>
              Get object as string.
              
             <code title="JSON De-serilization" description="" lang="CS">
             // Simple class with two properties
                 public class ExampleClass
                 {
                     public string StringPop = "String Property";
                     public int IntProperty = 20110801;
                 }
                 
                 [TestMethod]
                 public void PrintObjectAsJsonString()
                 {
                     // Save data by using an object serialization
                     PersistenceService.SaveData("Key1", new ExampleClass());
            
                     // Get data back as string in JSON format
                     var data = PersistenceService.GetDataAsString("Key1");
                     Debug.WriteLine(data);
                 }
                 
             Output:
             {"IntProperty":20110801,"StringPop":"String Property"}</code></example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.RemoveData(System.String,System.String)">
            <summary>
            Removes record from persistent storage.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given namespace.</param>
            <param name="nameSpace">
             A logical container that provides context for the Object IDs
             Same object ID can exist in different namespaces.
             Use your company name as the prefix for a namespace identifier.
             If <c>nameSpace</c> is null or omitted then the application ID is used.
             </param>
            <returns>True - if record existed. False - if attempted to delete non-existing record.</returns>
            <exception caption="" cref="T:System.ArgumentException">Root id cannot be null or empty.</exception>
            <example>
            <code title="Data Removal" description="" lang="CS">
            ...
            PersistenceService.RemoveData("Key1");
            ...</code>
            </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.KeyExists(System.String,System.String)">
            <summary>
             Checks if record exists in persistent storage.
            </summary>
            <param name="objectId">The unique identifier of data blob within a given nameSpace</param>
            <param name="nameSpace">
             A logical container that provides context for the Object IDs
             Same object ID can exist in different namespaces.
             Use your company name as the prefix for a namespace identifier.
             If <c>nameSpace</c> is null or omitted then the application ID is used.
             </param>
            <returns>True - if record exists.</returns>
            <exception caption="" cref="T:System.ArgumentException">Root id cannot be null or empty.</exception>
            <example>
            <code title="Data Existence Query" description="" lang="CS">
            ...
            var isRecordExist = PersistenceService.KeyExists("Key1")
            ...</code>
            </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.RegisterSharedType(System.Type)">
            <summary>Register a type to be a part of persistence hierarchy (See example bellow).</summary>
            <param name="type">Type of the root's class member that is not nested.</param>
            <remarks>
            	<para>When a root class that is being serialized contains member(s) of not nested type - those types must be registered with the Persistence Service.</para>
            	<para>It's main purpose to support persistence of types that already exist. New types should be designed using nested type as described
            <see cref="T:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService">here</see>.</para>
            </remarks>
            <example>
            <code title="RegisterSharedType Usage" description="When a root class that is being serilized contains meber(s) of not nested type - this type must be rgisterd with the Persistence Service" lang="CS">
            // Nested classes scenario recommended
            public class ParentNested
            {
                public class ChildNested
                {
                    public string Name;
                }
             
                public ChildNested Child;
            }
             
            // Pair of not nested classes - 
            // to support legacy code when data structures 
            // already existed
            public class ChildNotNested
            {
                public string Name;
            }
             
            public class ParentNotNested
            {
                public ChildNotNested Child;
            }
             
            [TestClass]
            public class RegisterSharedTypeTest
            {
                [TestMethod]
                public void Test()
                {
                    // Nested(self contained) data structure
                    // is persisted implicitly.
                    var obj1 = new ParentNested {Child = new ParentNested.ChildNested {Name = "Name"}};
                    PersistenceService.DefaultContext.SaveData("1", obj1);
             
                    // Let's try to persist object that has
                    // members of not nested types.
                    // It should throw an exception
                    var obj2 = new ParentNotNested { Child = new ChildNotNested { Name = "Name" } };
                    try
                    {
                        PersistenceService.DefaultContext.SaveData("1", obj2);
                        Assert.Fail();
                    }
                    catch(BlpAppPortalException ex)
                    {
                        Assert.AreEqual(ex.BlpErrorType, 6);
                        Assert.IsTrue(ex.Message.Contains("Object type ChildNotNested is not a nested class"));
                    }
             
                    // Let's fix the problem by registering the 
                    // ChildNotNested class with persistence service
                    PersistenceService.RegisterSharedType(typeof(ChildNotNested));
                    PersistenceService.DefaultContext.SaveData("1", obj2);
                }
            }</code>
            </example>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.DataPersistence.PersistenceService.OperationTimeout">
            <summary>
            How long to wait for remote persistence service response
            </summary>
            <value>The wait period before ether the response arrives or the timeout exception is thrown</value>
            <remarks>Default: No timeout. Service will wait till one of the lower communication layers times out. 
            TimeSpan(0,0,0,0,-1) = -1 ms - is interpreted as "wait indefinite"</remarks>
        </member>
        <member name="M:Microsoft.Windows.Shell.SystemCommands.ShowSystemMenu(System.Windows.Window,System.Windows.Point)">
            <summary>Display the system menu at a specified location.</summary>
            <param name="screenLocation">The location to display the system menu, in logical screen coordinates.</param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog">
            <summary>
            Represents a common dialog box that allows a user to specify a filename for one or more files to open.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.#ctor">
            <summary>
            Initializes a new instance of the OpenFileDialog class.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.AddFileTypeFilter(System.String,System.String)">
            <summary>
            Add File Type Filter. Caller calls this method to allow what type of file will show in the dialog.
            </summary>
            <param name="displayText">The text that appears in the File Type dropdown. For example: "Text files (*.txt)", "Excel files (*.xls;*.xlsx)"</param>
            <param name="extension">The extension of the file. Use ; separate multiple extensions. For example: "*.txt", "*.xls;*.xlsx". All files filter("*.*") is not allowed</param>
            <remarks>
            Caller must add one or more filters before calling ShowDialog. Otherwise ShowDialog will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.OpenFile">
            <summary>
            Opens a read-only stream for the file that is selected by the user using OpenFileDialog.
            </summary>
            <returns>A read-only stream for the file that is selected by the user using OpenFileDialog.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.OpenFiles">
            <summary>
            Creates an array that contains one read-only stream for
            each file selected by the user using OpenFileDialog.
            </summary>
            <returns>An array that contains one read-only stream for
            each file selected by the user using OpenFileDialog.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.ShowDialog">
            <summary>
            Runs a common dialog box with a default owner.
            </summary>
            <returns>If the user clicks the OK button of the dialog that is displayed,
            true is returned; otherwise, false.</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>A string containing the full path of the file selected in a file dialog.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.FileNames">
            <summary>
            Gets an array that contains one file name for each selected file.
            </summary>
            <value>An array that contains one file name for each selected file.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.Multiselect">
            <summary>
            Gets or sets an option indicating whether OpenFileDialog allows users to select multiple files.
            </summary>
            <value>An option indicating whether OpenFileDialog allows users to select multiple files.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.OpenFileDialog.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>The text that appears in the title bar of a file dialog.</value>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.PopupWindow">
            <summary>
            Provide a modeless dialog that can host user-defined UI content.
            </summary>    
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Instance">
            <summary>
            The singleton instance of PopupWindow.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.PopupWindow.ClearMinWidth">
            <summary>
            Clear MinWidth
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.PopupWindow.ClearMinHeight">
            <summary>
            Clear MinHeight
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.PopupWindow.ClearMaxWidth">
            <summary>
            Clear MaxWidth
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.PopupWindow.ClearMaxHeight">
            <summary>
            Clear MaxHeight
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.PopupWindow.ShowWindow(System.Windows.UIElement)">
            <summary>
            Show a modeless dialog with the content. Users can still interact with the main window while this dialog is open.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Close">
            <summary>
            This method will hide the popup window.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Style">
            <summary>
            Popup Style
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Title">
            <summary>
            Window Title
            </summary>        
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Icon">
            <summary>
            Window Icon
            </summary>        
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Sizable">
            <summary>
            Get or set the property to control if the window is sizable
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.MinHeight">
            <summary>
            Gets or sets the minimum height constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.MaxHeight">
            <summary>
            Gets or sets the maximum height constraint of the dialog.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Width">
            <summary>
            Gets or sets the width of the popup
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Height">
            <summary>
            Gets or sets the height of the popup
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Top">
            <summary>
            Gets or sets the position of the popup's top edge, in relation to the desktop. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Left">
            <summary>
            Gets or sets the position of the popup's left edge, in relation to the desktop. 
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.PopupWindow.StartupLocation">
            <summary>
            Gets or sets the position of the popup
            </summary>
        </member>
        <member name="E:Bloomberglp.AppPortalApi.Desktop.PopupWindow.Closed">
            <summary>
             This event will be fired when the window is closed.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.StartupLocation">
            <summary>
            Specify the position of a dialog when it is open.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.StartupLocation.CenterScreen">
            <summary>
            The location is the center of the screen that contains the mouse cursor.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.StartupLocation.CenterOwner">
            <summary>
            The location is the center of the MainWindow. Apps inside LaunchPad don't support this mode.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Desktop.StartupLocation.Manual">
            <summary>
            The location is set from code.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection">
            <summary>
            SQLite implementation of DbParameterCollection.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection._command">
            <summary>
            The underlying command to which this collection belongs.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection._parameterList">
            <summary>
            The internal array of parameters in this collection.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.#ctor(Bloomberglp.AppPortalApi.Data.Sql.DbCommand)">
            <summary>
            Initializes the collection
            </summary>
            <param name="cmd">The command to which the collection belongs</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.GetEnumerator">
            <summary>
            Retrieves an enumerator for the collection.
            </summary>
            <returns>An enumerator for the underlying array</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Add(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <param name="sourceColumn">The source column</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a parameter to the collection.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Add(System.String,System.Data.DbType)">
            <summary>
            Adds a parameter to the collection.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Add(Bloomberglp.AppPortalApi.Data.Sql.DbParameter)">
            <summary>
            Adds a parameter to the collection.
            </summary>
            <param name="parameter">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Add(System.Object)">
            <summary>
            Adds a parameter to the collection.
            </summary>
            <param name="value">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a named/unnamed parameter and its value to the parameter collection.
            </summary>
            <param name="parameterName">Name of the parameter, or null to indicate an unnamed parameter</param>
            <param name="value">The initial value of the parameter</param>
            <returns>Returns the SQLiteParameter object created during the call.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.AddRange(Bloomberglp.AppPortalApi.Data.Sql.DbParameter[])">
            <summary>
            Adds an array of parameters to the collection.
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of parameters to the collection.
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Clear">
            <summary>
            Clears the array and resets the collection.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Contains(System.String)">
            <summary>
            Determines if the named parameter exists in the collection.
            </summary>
            <param name="parameterName">The name of the parameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Contains(System.Object)">
            <summary>
            Determines if the parameter exists in the collection.
            </summary>
            <param name="value">The SQLiteParameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.GetParameter(System.String)">
            <summary>
            Retrieve a parameter by name from the collection.
            </summary>
            <param name="parameterName">The name of the parameter to fetch</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.GetParameter(System.Int32)">
            <summary>
            Retrieves a parameter by its index in the collection.
            </summary>
            <param name="index">The index of the parameter to retrieve</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of a parameter given its name.
            </summary>
            <param name="parameterName">The name of the parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of a parameter.
            </summary>
            <param name="value">The parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a parameter into the array at the specified location.
            </summary>
            <param name="index">The zero-based index to insert the parameter at</param>
            <param name="value">The parameter to insert</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Remove(System.Object)">
            <summary>
            Removes a parameter from the collection.
            </summary>
            <param name="value">The parameter to remove</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes a parameter from the collection given its name.
            </summary>
            <param name="parameterName">The name of the parameter to remove</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a parameter from the collection given its index.
            </summary>
            <param name="index">The zero-based parameter index to remove</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Re-assign the named parameter to a new parameter object.
            </summary>
            <param name="parameterName">The name of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Re-assign a parameter at the specified index.
            </summary>
            <param name="index">The zero-based index of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.IsSynchronized">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.IsFixedSize">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.SyncRoot">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Count">
            <summary>
            Returns a count of parameters in the collection.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Item(System.String)">
            <summary>
            Overloaded to specialize the return value of the default indexer.
            </summary>
            <param name="parameterName">Name of the parameter to get/set</param>
            <returns>The specified named SQLite parameter</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Data.Sql.DbParameterCollection.Item(System.Int32)">
            <summary>
            Overloaded to specialize the return value of the default indexer.
            </summary>
            <param name="index">The index of the parameter to get/set</param>
            <returns>The specified SQLite parameter</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.SecurityComponentProperties">
            <summary>
            Encapsulates the security component properties collection.  
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.SecurityComponentProperties.Contains(Bloomberglp.AppPortalApi.Security)">
            <summary>
            Checks whether a security name exists in the collection
            </summary>
            <param name="security">The security component property name to be verified</param>
            <returns>Returns true is the component property exists in the collection, else returns false</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.SecurityComponentProperties.Find(Bloomberglp.AppPortalApi.Security)">
            <summary>
            Finds the security component property by security name
            </summary>
            <param name="security">The name of the security to be searched</param>
            <returns>Security componet property if found in the list; otherwise, null.</returns>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.SecurityComponentProperties.Item(Bloomberglp.AppPortalApi.Security)">
            <summary>
            Gets or sets the value associated with the specified security component.
            </summary>
            <returns>
            The value associated with the specified security component. If the specified security is not found, a get operation throws a BlpAppPortalException, and a set operation creates a new element with the specified security.
            </returns> 
        </member>
        <member name="P:Bloomberglp.AppPortalApi.SecurityComponentProperties.Names">
            <summary>
            Returns names of security component properties 
            </summary>
        </member>
        <member name="T:Bloomberg.SmartClient.ClientServices.SCMessageHandler">
            <summary>
            A delegate to handle a message notification
            </summary>
        </member>
        <member name="T:Bloomberg.SmartClient.ClientServices.ProcessSCMessageIn">
            <summary>
            Summary description for ProcessSCMessageIn.
            </summary>
            
            
            
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ProcessSCMessageIn.BeginProcessing">
            <summary>
            Signals the infrastructure to flush all queued messages and forward all subsequent messages to to the
            delegate of any subscribers
            </summary>
            <remarks>
            Once this method is called all messaging queueing by the infrastructure ceases.  
            Any messages not subscribed to will be lost.  You must call this method to begin 
            receiving messages, so take care to subscribe to all messages that you need since
            startup prior to calling this method</remarks> 
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ProcessSCMessageIn.Subscribe(System.String,Bloomberg.SmartClient.ClientServices.SCMessageHandler)">
            <summary>
            Registers the passed MessageHandler to be invoked when messages of the
            passed subject are received
            </summary>
            <param name="subject">The subject of a message to listen for</param>
            <param name="callback">The callback to invoke when a message is received</param> 
        </member>
        <member name="M:Bloomberg.SmartClient.ClientServices.ProcessSCMessageIn.Unsubscribe(System.String)">
            <summary>
            Removes registration for a particular subject
            </summary>
            <param name="subject">The subject of a message to listen for</param> 
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Tutorial.TutorialService">
            <summary>
            This service provides Tutorial Service APIs.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.TutorialService.IsTutorialRegionProperty">
            <summary>
            IsTutorialRegion Attached Dependency Property.
            Use this property to set the root element of all the elements that have guidances.
            This element will be used to set the boundary of all the guidances.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.TutorialService.GetIsTutorialRegion(System.Windows.DependencyObject)">
            <summary>
            Gets the IsTutorialRegion property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.TutorialService.SetIsTutorialRegion(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsTutorialRegion property.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Tutorial.GuidanceService">
            <summary>
            This service provides all the APIs to support guidances.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.IsGuidanceEnabledProperty">
            <summary>
            IsGuidanceEnabled Attached Dependency Property. Use this property to enable or disable the guidance on an element.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetIsGuidanceEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets the IsGuidanceEnabled attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetIsGuidanceEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsGuidanceEnabled attached property
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GuidanceContentProperty">
            <summary>
            GuidanceContent Attached Dependency Property. Use this property to set Guidance's Content.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetGuidanceContent(System.Windows.DependencyObject)">
            <summary>
            Gets the GuidanceContent attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetGuidanceContent(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the GuidanceContent attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GuidanceContentTemplateProperty">
            <summary>
            GuidanceContentTemplate Attached Dependency Property. Use this propertyto set Guidance's ContentTemplate.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetGuidanceContentTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the GuidanceContentTemplate attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetGuidanceContentTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Gets the GuidanceContentTemplate attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.OrderProperty">
            <summary>
            Order Attached Dependency Property. Use this property to set Guidance's playing order.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetOrder(System.Windows.DependencyObject)">
            <summary>
            Gets the Order attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetOrder(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the Order attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GuidancePlacementProperty">
            <summary>
            GuidancePlacement Attached Dependency Property. Use this property to set Guidance placement.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetGuidancePlacement(System.Windows.DependencyObject)">
            <summary>
            Gets the GuidancePlacement attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetGuidancePlacement(System.Windows.DependencyObject,Bloomberglp.AppPortalApi.Tutorial.GuidancePlacement)">
            <summary>
            Sets the GuidancePlacement attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.BorderBrushProperty">
            <summary>
            BorderBrush Attached Dependency Property. Use this property to set Guidance's border brush.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetBorderBrush(System.Windows.DependencyObject)">
            <summary>
            Gets the BorderBrush attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the BorderBrush attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.BorderThicknessProperty">
            <summary>
            BorderThickness Attached Dependency Property. Use this property to set Guidance's border thickness.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetBorderThickness(System.Windows.DependencyObject)">
            <summary>
            Gets the BorderThickness attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetBorderThickness(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the BorderThickness attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.FillProperty">
            <summary>
            Fill Attached Dependency Property. Use this property to specify how Guidance's interior is painted.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetFill(System.Windows.DependencyObject)">
            <summary>
            Gets the Fill attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetFill(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the Fill attached property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.ShowGuidanceProperty">
            <summary>
            ShowGuidance Attached Dependency Property. Use this property to show/hide guidance at runtime.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetShowGuidance(System.Windows.DependencyObject)">
            <summary>
            Gets the ShowGuidance property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetShowGuidance(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ShowGuidance property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.OnShowGuidanceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ShowGuidance property.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GuidanceOpacityProperty">
            <summary>
            GuidanceOpacity Attached Dependency Property. Use this property to set Guidance's opacity.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.GetGuidanceOpacity(System.Windows.DependencyObject)">
            <summary>
            Gets the GuidanceOpacity attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.SetGuidanceOpacity(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the GuidanceOpacity attached property.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.ShowAll">
            <summary>
            Show all enabled guidances at once.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.CloseAll">
            <summary>
            Close all guidances.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.Play(System.TimeSpan,System.Windows.Threading.Dispatcher)">
            <summary>
            Play guiadnces one by one
            </summary>
            <param name="interval">the interval between guidances</param>
            <param name="dispatcher">the dispatcher that the timer runs on</param>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.GuidanceService.StopPlaying">
            <summary>
            Stop playing guidances.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.SoundPlayer">
            <summary>
            The wrapper of System.Media.SoundPlayer
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SoundPlayer.Play(System.Uri)">
            <summary>
             Play the wav file that is compiled into an assembly as the resource.
            </summary>
            <param name="uri">The Uri of the resource</param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.MessageBox">
            <summary>
             The wrapper of System.Windows.MessageBox. It exposes a subset of overload Show methods.
            </summary>    
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.MessageBox.Show(System.String)">
            <summary>
            </summary>
            <param name="messageBoxText"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.MessageBox.Show(System.String,System.String)">
            <summary>
            </summary>
            <param name="messageBoxText"></param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            </summary>
            <param name="messageBoxText"></param>
            <param name="caption"></param>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            </summary>
            <param name="messageBoxText"></param>
            <param name="caption"></param>
            <param name="button"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog">
            <summary>
            Sends a common dialog that allows the user to specify a filename to save a file as.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.#ctor">
            <summary>
            Initializes a new instance of the SaveFileDialog class.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.AddFileTypeFilter(System.String,System.String)">
            <summary>
            Add File Type Filter. Caller calls this method to allow what type of file will show in the dialog.
            </summary>
            <param name="displayText">The text that appears in the File Type dropdown. For example: "Text files (*.txt)", "Excel files (*.xls;*.xlsx)"</param>
            <param name="extension">The extension of the file. Use ; separate multiple extensions. For example: "*.txt", "*.xls;*.xlsx". All files filter("*.*") is not allowed</param>
            <remarks>
            Caller must add one or more filters before calling ShowDialog. Otherwise ShowDialog will throw an InvalidOperationException.
            </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.ShowDialog">
            <summary>
            Runs a common dialog box with a default owner.
            </summary>
            <returns>If the user clicks the OK button of the dialog that is displayed,
            true is returned; otherwise, false.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.OpenFile">
            <summary>
            Creates a read-write file stream for the filename selected by the user using SaveFileDialog.
            </summary>
            <returns>A read-write file stream for the filename selected by the user using SaveFileDialog.</returns>        
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.CreatePrompt">
            <summary>
            Gets or sets a value indicating whether SaveFileDialog prompts the user for
            permission to create a file if the user specifies a file that does not exist.
            </summary>
            <value>A value indicating whether SaveFileDialog prompts the user for
            permission to create a file if the user specifies a file that does not exist.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.OverwritePrompt">
            <summary>
            Gets or sets a value indicating whether SaveFileDialog displays a warning
            if the user specifies the name of a file that already exists.
            </summary>
            <value>A value indicating whether SaveFileDialog displays a warning
            if the user specifies the name of a file that already exists.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>A string containing the full path of the file selected in a file dialog.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.Desktop.SaveFileDialog.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>The text that appears in the title bar of a file dialog.</value>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.Controls.ComboBoxExtension">
            <summary>
            Extension methods for ComboBox
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Desktop.Controls.ComboBoxExtension.SetIsDropDownOpen(System.Windows.Controls.ComboBox,System.Boolean)">
            <summary>
            Set IsDropDownOpen with Unmanaged code permissoin
            </summary>
            <param name="comboBox"></param>
            <param name="isDropDownOpen"></param>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpApplicationAttribute">
            <summary>
            Used to mark a class as a Bloomberg Application.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions">
            <summary>
             Extension methods for DataElement type.
            </summary>
             <remarks>
             <para>
             Advantage of extension methods - 
             it is possible to return null instead of throwing an exception when invoked with a null object.
             This is not possible to do when the function is implemented as a member of a class.
             </para>
             <para>
             This type provides two sets of methods to manipulate de-serialized data:
             <list type="table">
             <item><term>Data mapping functions</term>
             <description>Get data when structure of saved data is known. Functions:
             (<c>Item</c>, <c>ToList</c>, <c>ToArray</c>, <c>ToDictionary</c>)</description>
             </item>
             <item><term>Data iteration functions</term>
             <description>Iterate trough data when the data layout is unknown. Functions: 
             ComplexUnnamedValues, SimpleUnnamedValues, ComplexNnamedValues, SimpleNnamedValues. 
             There is a sample for the intended use of this functionality in an example section
             It is important to understand key differences between these functions. 
             The result of "Complex" functions can be iterated for values of a value from the result.
             "Simple" result elements cannot be queried for inner values. 
             There are two type of internal storage containers: list - "Unnamed values" and 
             dictionary = "Named values".
             </description>
             </item>
             </list>
             </para>
             </remarks>
             <example>
             Data iteration example (see <see cref="!:PersistenceService.ReadObject&lt;T&gt;"/> for sample data definition):
             <code>
             
                public void PrintJsonDataTest()
                {
                    //Prepare test data
                    var data = TestDataViewerSettingsSample.FillWithSample1();
            
                    //Save blob of data with a key and scope (Application/Organization)
                    PersistenceService.SaveData(_currentRootId, data, _currentScopeId);
            
                    var jsonData = PersistenceService.GetDataAsDictionary(_currentRootId, _currentScopeId);
                    PrintJsonData("", jsonData);
                }
            
                private static void PrintJsonData(string prefix, DataElement data)
                {
                    foreach (var v in data.SimpleNamedValues())
                    {
                        Debug.WriteLine(prefix + ":" + v.Key + ": " + v.Value);
                    }
                    foreach (var v in data.SimpleUnnamedValues())
                    {
                        Debug.WriteLine(prefix + ":" + v.Key + ": " + v.Value);
                    }
            
                    foreach (var v in data.ComplexNamedValues())
                    {
                        PrintJsonData(prefix + ":" + v.Key, v.Value);
                    }
                    foreach (var v in data.ComplexUnnamedValues())
                    {
                        PrintJsonData(prefix + ":" + v.Key, v.Value);
                    }
                } 
             //This illustrates API that is able to recursively iterate any JSON object
             // without prior knowledge of document structure 
             // Output looks like this:
             /*
                :BookmarkRoot:NodeId: 12
                :BookmarkRoot:ParentId: -1
                :BookmarkRoot:FolderName: RootFolder
                :BookmarkRoot:Bookmarks:0:NodeId: 13
                :BookmarkRoot:Bookmarks:0:ParentId: 12
                :BookmarkRoot:Bookmarks:0:Accessed: 4/8/2011 2:13:54 PM
                :BookmarkRoot:Bookmarks:0:Created: 4/8/2011 2:13:54 PM
                :BookmarkRoot:Bookmarks:0:Name: Bookmark_0_0
                :BookmarkRoot:Bookmarks:0:Log:AliasName: Log_Alias_0_0
                :BookmarkRoot:Bookmarks:0:Log:RealName: Log_Realname_0_0
                :BookmarkRoot:Bookmarks:0:Terminal:AliasName: Terminal_Alias_0_0
                :BookmarkRoot:Bookmarks:0:Terminal:RealName: Terminal_Realname_0_0
                :BookmarkRoot:Bookmarks:1:NodeId: 14
                :BookmarkRoot:Bookmarks:1:ParentId: 12
                :BookmarkRoot:Bookmarks:1:Accessed: 4/8/2011 2:13:54 PM
                :BookmarkRoot:Bookmarks:1:Created: 4/8/2011 2:13:54 PM
                :BookmarkRoot:Bookmarks:1:Name: Bookmark_0_0
                :BookmarkRoot:Bookmarks:1:Log:AliasName: Log_Alias_0_1
                :BookmarkRoot:Bookmarks:1:Log:RealName: Log_Realname_0_1
                :BookmarkRoot:Bookmarks:1:Terminal:AliasName: Terminal_Alias_0_1
                :BookmarkRoot:Bookmarks:1:Terminal:RealName: Terminal_Realname_0_1
                :BookmarkRoot:SubFolders:0:NodeId: 15
                :BookmarkRoot:SubFolders:0:ParentId: 12
                :BookmarkRoot:SubFolders:0:FolderName: SubFolder_1
                :BookmarkRoot:SubFolders:0:Bookmarks:0:NodeId: 16
                :BookmarkRoot:SubFolders:0:Bookmarks:0:ParentId: 15
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Accessed: 4/8/2011 2:13:54 PM
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Created: 4/8/2011 2:13:54 PM
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Name: Bookmark_0_0
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Log:AliasName: Log_Alias_1_0
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Log:RealName: Log_Realname_1_0
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Terminal:AliasName: Terminal_Alias_1_0
                :BookmarkRoot:SubFolders:0:Bookmarks:0:Terminal:RealName: Terminal_Realname_1_0
                :BookmarkRoot:SubFolders:0:Bookmarks:1:NodeId: 17
                :BookmarkRoot:SubFolders:0:Bookmarks:1:ParentId: 15
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Accessed: 4/8/2011 2:13:54 PM
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Created: 4/8/2011 2:13:54 PM
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Name: Bookmark_0_0
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Log:AliasName: Log_Alias_1_1
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Log:RealName: Log_Realname_1_1
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Terminal:AliasName: Terminal_Alias_1_1
                :BookmarkRoot:SubFolders:0:Bookmarks:1:Terminal:RealName: Terminal_Realname_1_1
                :FileAliasMap:0:Key: AppLog1
                :FileAliasMap:0:Value: AppLog1.log
                :FileAliasMap:1:Key: AppLog2
                :FileAliasMap:1:Value: AppLog2.log
                :LastAppPosition:Bottom: 800
                :LastAppPosition:Left: 1
                :LastAppPosition:Right: 800
                :LastAppPosition:Top: 1
                :TerminalAliasMap:0:Key: Old PC
                :TerminalAliasMap:0:Value: 163249
                :TerminalAliasMap:1:Key: WS
                :TerminalAliasMap:1:Value: 565333
                :ViewHistory:0:LastUsed: 3/29/2011 2:13:54 PM
                :ViewHistory:0:LogFile:AliasName: progid1
                :ViewHistory:0:LogFile:RealName: app_12345.log
                :ViewHistory:0:Terminal:AliasName: Old PC
                :ViewHistory:0:Terminal:RealName: 163249
                :ViewHistory:1:LastUsed: 3/29/2011 2:13:54 PM
                :ViewHistory:1:LogFile:AliasName: progid2
                :ViewHistory:1:LogFile:RealName: app_54321.log
                :ViewHistory:1:Terminal:AliasName: Old PC
                :ViewHistory:1:Terminal:RealName: 163249 
             */
             </code>
             Manual data mapping examples:
             <code>
            public class RawDataMappingIllustration
            {
                public class SmallObj
                {
                    public string S;
                }
            
                //Array of primitive values
                public int[] Ai = new[] { 1, 2, 3 };
            
                //Array of objects
                public SmallObj[] Ao = new[] { new SmallObj { S = "a" }, new SmallObj { S = "b" }, new SmallObj { S = null }, null };
                //List of objects
                public List&lt;SmallObj&gt; Al = new List&lt;SmallObj&gt; { new SmallObj { S = "a" }, new SmallObj { S = "b" } };
            
                //Dictionary of pair of string key and object value
                public Dictionary&lt;string, SmallObj&gt; Ad = new Dictionary&lt;string, SmallObj&gt; { { "k1", new SmallObj { S = "v1" } }, { "k2", new SmallObj { S = "v2" } } };
            
                //String value
                public string S = "string value";
            
                //Long value
                public long L = 1;
            
                //Special case in JSON we treat DateTime as primitive value
                public DateTime D = DateTime.Now;
            
                //Object value
                public SmallObj Os = new SmallObj();
                public SmallObj OsN;
            
                // Serializes this object, then reads it back as parsed JSON tree and makes new instance 
                // by manually assigning JSON values to object members.
                // In production code any result of indexer has to be tested for nulls if they are going to be used
                // for consequent operations like method calls.
                public static RawDataMappingIllustration CopyObject()
                {
                    PersistenceService.SaveData("CopyUsingJsonKey", new RawDataMappingIllustration());
                    var data = PersistenceService.GetDataAsDictionary("CopyUsingJsonKey");
                    var r = data;
            
                    var res = new RawDataMappingIllustration
                    {
                        D = r["D"],
                        S = r["S"],
                        L = r["L"],
                        Ai = r["Ai"].ToArray(v =&gt; (int)v),
                        Ao = r["Ao"].ToArray(v =&gt; (v == null) ? null : new SmallObj { S = (string)v["S"] }),
                        Al = r["Al"].ToList(v =&gt; (v == null) ? null : new SmallObj { S = (string)v["S"] }),
                        Os = (r["OsN"] == null) ? null : new SmallObj { S = r["Os"]["S"] },
                        OsN = (r["OsN"] == null) ? null : new SmallObj { S = r["OsN"]["S"] },
                        Ad = r["Ad"].ToDictionary&lt;string, SmallObj&gt;(k =&gt; k, v =&gt; (v == null) ? null : new SmallObj { S = (string)v["S"] })
                    };
                    return res;
                }
            
                // Same as the previous example, only index operation is replace with Item extension function.
                // This does not throw an exception when object (this) is null.
                public static RawDataMappingIllustration CopyObjectTollerant()
                {
                    PersistenceService.SaveData("CopyUsingJsonKey", new RawDataMappingIllustration());
                    var data = PersistenceService.GetDataAsDictionary("CopyUsingJsonKey");
                    var r = data;
            
                    var res = new RawDataMappingIllustration
                    {
                        D = r.Item("D"),
                        S = r.Item("S"),
                        L = r.Item("L"),
                        Ai = r.Item("Ai").ToArray(v =&gt; (int)v),
                        Ao = r.Item("Ao").ToArray(v =&gt; (v == null) ? null : new SmallObj { S = (string)v.Item("S") }),
                        Al = r.Item("Al").ToList(v =&gt; new SmallObj { S = (string)v.Item("S") }),
                        Os = (r.Item("Os") == null) ? null : new SmallObj { S = r.Item("Os").Item("S") },
                        OsN = (r.Item("OsN") == null) ? null : new SmallObj { S = r.Item("OsN").Item("S") },
                        Ad = r.Item("Ad").ToDictionary&lt;string, SmallObj&gt;(k =&gt; k, v =&gt; new SmallObj { S = (string)v.Item("S") })
                    };
                    return res;
                }
            }    
             </code>
             </example>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.Item(Bloomberglp.AppPortalApi.DataPersistence.DataElement,System.String)">
            <summary>
             Wraps indexer method <c>DataElement</c>
            </summary>
            <param name="this">DataElemnt that this method is invoked from</param>
            <param name="key">Name of property or field</param>
            <returns>Value of property or name</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.Item(Bloomberglp.AppPortalApi.DataPersistence.DataElement,System.Int32)">
            <summary>
             Wraps indexer method <c>DataElement</c>
            </summary>
            <param name="this">DataElemnt that this method is invoked from</param>
            <param name="key">Index of object if saved as array</param>
            <returns>Object value</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.ToDictionary``2(Bloomberglp.AppPortalApi.DataPersistence.DataElement,System.Func{Bloomberglp.AppPortalApi.DataPersistence.DataElement,``0},System.Func{Bloomberglp.AppPortalApi.DataPersistence.DataElement,``1})">
            <summary>
             Return data as dictionary.
            </summary>
            <param name="this">This <c>DataElement</c></param>
            <param name="kres">Expression to map elements of the array to key objects</param>
            <param name="vres">Expression to map elements of the array to target value objects</param>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TV">Value type</typeparam>
            <returns>Dictionary values of type <c>T</c></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.ToArray``1(Bloomberglp.AppPortalApi.DataPersistence.DataElement,System.Func{Bloomberglp.AppPortalApi.DataPersistence.DataElement,``0})">
            <summary>
             Returns data as array.
            </summary>
            <param name="this">This <c>DataElement</c></param>
            <param name="res">Expression to map elements of the array to target objects</param>
            <typeparam name="T">Target object type</typeparam>
            <returns>Array values of type <c>T</c></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.ToList``1(Bloomberglp.AppPortalApi.DataPersistence.DataElement,System.Func{Bloomberglp.AppPortalApi.DataPersistence.DataElement,``0})">
            <summary>
             Returns data as List.
            </summary>
            <param name="this">This <c>DataElement</c></param>
            <param name="res">Expression to map elements of the list to target objects</param>
            <typeparam name="T">Target object type</typeparam>
            <returns>List values of type <c>T</c></returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.ComplexUnnamedValues(Bloomberglp.AppPortalApi.DataPersistence.DataElement)">
            <summary>
             If an object is an array of complex values its elements are returned.
            </summary>
            <param name="this">Reference to array objects</param>
            <returns>Key value pair of  index position and value</returns>
             <remarks>
             Iterate through result and query object recursively
             </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.SimpleUnnamedValues(Bloomberglp.AppPortalApi.DataPersistence.DataElement)">
            <summary>
             If an object is an array of simple values its elements are returned.
            </summary>
            <param name="this">Reference to array of primitive values </param>
            <returns>Key value pair of  index position and value</returns>
             <remarks>
             Iterate through result and query object recursively
             </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.ComplexNamedValues(Bloomberglp.AppPortalApi.DataPersistence.DataElement)">
            <summary>
             For a complex object its complex properties/fields are returned.
            </summary>
            <param name="this">Reference of a dictionary of complex values</param>
            <returns>Key value pair of property name and value</returns>
             <remarks>
             Iterate through result and query object recursively
             </remarks>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.DataPersistence.DataElementExtensions.SimpleNamedValues(Bloomberglp.AppPortalApi.DataPersistence.DataElement)">
            <summary>
             For a complex object its primitive properties/fields are returned.
            </summary>
            <param name="this">Reference of a dictionary of primitive values</param>
            <returns>Key value pair of property name and value</returns>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.NoErrors">
            <summary>
             This one just for completeness.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.EntryNotFound">
            <summary>
             Record not found.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.InvalidContext">
            <summary>
             Application was not able to construct full record context.
             Could not get UUID or AppID for example.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.InternalError">
            <summary>
             Internal error.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.DataStructureValidationError">
            <summary>
             Reserved for future use.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.InvalidKey">
            <summary>
             Invalid key format.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.DataPersistence.PersitenceErrorCode.Timeout">
            <summary>
            Response waiting timeout
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.SystemParameters2.#ctor">
            <summary>
            Private constructor.  The public way to access this class is through the static Current property.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.DataPersistence.Remote.Bde.IBdeResponseData`1">
            <summary>
            Summary description for IXmlResponseData.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Desktop.RawMouseActions">
            <summary>
            Extracting System.Windows.Input.RawMouseActions
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.NamespaceDoc">
            <summary>
             This namespace contains the API that provides applications with the ability to interact
             with the Bloomberg terminal by invoking terminal mnemonics, launching LP components,
             roaming user specific data from terminal to terminal, et cetera.
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.BlpEnvironment">
            <summary>
             Bloomberg environment variables.
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.Security1">
            <summary>
             Gets the first loaded security, if any.
            </summary>
             <value>The string that indicates the first loaded security, if any.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.Security2">
            <summary>
              Gets the second loaded security, if any.
            </summary>
             <value>The string that indicates the second loaded security, if any.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.ApplicationName">
            <summary>
             Gets the name of the calling application.
            </summary>
             <value>The string that indicates the calling application's name.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.ApplicationDirectory">
            <summary>
             Gets the calling application's directory path.
            </summary>
             <value>The string that indicates the calling application's directory path.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.IsTerminalServicesEnvironment">
            <summary>
             Gets the value that indicates whether the application is being executed in the Terminal Services environment.
            </summary>
             <value><c>true</c> if the application is being executed in the Terminal Services environment; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.AppId">
            <summary>
            Gets the string that uniquely identifies the calling application
            within Bloomberg infrastructure (usually a GUID).
            </summary>
            <value>The string that uniquely identifies the calling application within Bloomberg infrastructure.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.Arguments">
            <summary>
            Get array of arguments passed to the application during startup.
            </summary>
            <value>Application startup arguments.</value>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.IsEmbedded">
            <summary>
            True if the application is running embedded in another window such as LaunchPad component
            </summary>
        </member>
        <member name="P:Bloomberglp.AppPortalApi.BlpEnvironment.AppFeatures">
            <summary>
            Dictionary of name/value pairs that represent user specific attributes from Application Portal infrastructure
            </summary>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Tutorial.GuidancePlacement">
            <summary>
            Guidance Placement
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidancePlacement.Left">
            <summary>
            Guidance is placed on the left side of the target element.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidancePlacement.Top">
            <summary>
            Guidance is placed above the target element.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidancePlacement.Right">
            <summary>
            Guidance is placed on the right side of the target element.
            </summary>
        </member>
        <member name="F:Bloomberglp.AppPortalApi.Tutorial.GuidancePlacement.Bottom">
            <summary>
            Guidance is placed below the target element.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Tutorial.CollisionDetectionService.Search(Bloomberglp.AppPortalApi.Tutorial.GuidanceRectItem,System.Windows.Vector,System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="direction"></param>
            <param name="windowRect"></param>
            <returns>true if the item doesn't overlap with others. false if search terminates 
            because item is out of window or reaches the maximum iterations.</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.NamespaceDoc">
             <summary>
             This is an implementation of ADO.NET interfaces for AppPortal's local database.
             In addition to exposing ADO.Net interfaces, objects and factories it does the following:
             <list type="bullet">
             <item><description>Uses database logical names instead of actual file names 
             (it is not possible to specify custom database file locations).
             </description></item>
             <item><description>Enforces database naming conventions.</description></item>
             <item><description>Uses Application Portal’s logging as default 
             log provider for SQLite log messages.
             </description></item>
             </list>
             </summary>
             <example>
             This example creates database, populates with some data, reads data back, encrypt/decrypt database
             <code>
                [TestClass]
                public class DbFactoryTest
                {
                    [TestMethod]
                    public void CapabilityTest()
                    {
                        // Get instance of DB provider (singleton)
                        var factory = DbProviderFactory.Instance;
            
                        // Get instance of connection string builder
                        var builder = (DbConnectionStringBuilder) factory.CreateConnectionStringBuilder();
                        Assert.IsNotNull(builder, "connection builder is null");
            
                        // Set db name
                        builder.DataSource = "MyDb";
                        builder.Password = "MyPassword";
            
                        // Get instance of DbConnection
                        var db = factory.CreateConnection();
                        Assert.IsNotNull(db, "Connection is null");
            
                        // Set connection string
                        db.ConnectionString = builder.ConnectionString;
            
                        // Delete old database
                        if (db.DbExists())
                            db.DropDatabase();
            
                        // Create encrypted db database connection
                        db.Open();
            
                        //
                        var cmd = db.CreateCommand();
                        cmd.CommandType = CommandType.Text;
            
                        const string table = "test_table";
                        const string temp = "";//"TEMP";
                        const string exists = " IF NOT EXISTS ";
            
                        var sql = String.Format("CREATE {0} TABLE {2}{1}(id int primary key);", temp, table, exists);
            
                        cmd.CommandText = sql;
                        var res = cmd.ExecuteNonQuery();
                        Assert.AreEqual(0,res);
            
                        var trn = db.BeginTransaction();
                        for(var i=0; i &lt; 100; i++)
                        {
                            cmd.CommandText = String.Format("INSERT INTO {1} (id) VALUES({0})", i, table);
                            cmd.ExecuteNonQuery();
                        }
                        trn.Commit();
                        var cntSql = String.Format("select count(*) from {0}", table);
            
                        cmd.CommandText = cntSql;
                        var rnum = cmd.ExecuteScalar();
                        Assert.AreEqual(100, (long)rnum);
            
                        cmd.CommandText = String.Format("select * from {0}", table);
                        var rdr = cmd.ExecuteReader();
                        Assert.IsTrue(rdr.HasRows);
                        var rres = 0;
                        while (rdr.Read())
                        {
                            rres += rdr.GetInt32(0);
                        }
                        rdr.Close();
                        Assert.AreEqual(100*99/2, rres);
            
                        DataSetTest(factory, db);
            
                        trn = db.BeginTransaction();
                        cmd.CommandText = String.Format("delete from {0}", table);
                        cmd.ExecuteNonQuery();
                        trn.Rollback();
            
                        cmd.CommandText = cntSql;
                        rnum = cmd.ExecuteScalar();
                        Assert.AreEqual(100, (long)rnum);
            
                        trn = db.BeginTransaction();
                        cmd.CommandText = String.Format("delete from {0}", table);
                        cmd.ExecuteNonQuery();
                        trn.Commit();
            
                        cmd.CommandText = cntSql;
                        rnum = cmd.ExecuteScalar();
                        Assert.AreEqual(0, (long)rnum);
            
                        sql = String.Format("DROP TABLE if exists {0}", table);
                        cmd.CommandText = sql;
                        res = cmd.ExecuteNonQuery();
                        Assert.AreEqual(100, res);
            
                        // Close encrypted db
                        db.Close();
            
                        // Decrypt db;
                        db.Open();
                        db.DecryptDatabase();
                        db.Close();
            
                        // Encrypt database
                        builder.Password = ""; // database is not encrypted
                        db.ConnectionString = builder.ConnectionString;
                        db.Open();
                        db.EncryptDatabase("newPassword");
                        db.Close();
            
                        // Check if passwords works
                        builder.Password = "newPassword";
                        db.ConnectionString = builder.ConnectionString;
                        db.Open();
                        db.Close();
                    }
            
                    private static void DataSetTest(DbProviderFactory factory, DbConnection db)
                    {
                        var adapter = factory.CreateDataAdapter();
                        var cmd = db.CreateCommand();
                        cmd.CommandText = "select * from test_table";
                        Assert.IsNotNull(adapter);
                        adapter.SelectCommand = cmd;
                        var ds = new DataSet();
                        adapter.Fill(ds);
                        var rres = ds.Tables[0].Rows.Cast &lt; DataRow &gt; ().Sum(row =&lt; (int) row["id"]);
                        ds.Clear();
                        Assert.AreEqual(100 * 99 / 2, rres);
                    }
                }
            
             </code>
             </example>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory">
            <summary>
            Application Portal's implementation of DbProviderFactory.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.#ctor">
            <overloads>
            Constructs a new DbProviderFactory object
            </overloads>
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.CreateCommand">
            <summary>
            Returns a new instance of the Application Portal's class that implements the <see cref="T:System.Data.Common.DbCommand"/> class.
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbCommand"/>.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.CreateCommandBuilder">
            <summary>
            Returns a new instance of the Application Portal's class that implements the <see cref="T:System.Data.Common.DbCommandBuilder"/> class.
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbCommandBuilder"/>.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.CreateConnection">
            <summary>
            Returns a new instance of the Application Portal's class that implements the <see cref="T:System.Data.Common.DbConnection"/> class.
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbConnection"/>.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.CreateConnectionStringBuilder">
            <summary>
            Returns a new instance of the Application Portal's class that implements the <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> class.
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder"/>.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.CreateDataAdapter">
            <summary>
            Returns a new instance of the Application Portal's class that implements the <see cref="T:System.Data.Common.DbDataAdapter"/> class.
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.Data.Sql.DbProviderFactory.CreateParameter">
            <summary>
            Returns a new instance of the Application Portal's class that implements the <see cref="T:System.Data.Common.DbParameter"/> class.
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbParameter"/>.</returns>
        </member>
        <member name="T:Bloomberglp.AppPortalApi.ChromeHelper">
            <summary>
             A utility class related to the App Portal Chrome Window.
            </summary>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.ChromeHelper.Wrap(System.Windows.Controls.UserControl)">
            <summary>
             Returns an App Portal Chrome Window that wraps the user control.
            </summary>
            <param name="userControl">The user control to be wrapped in a App Portal Chrome Window.</param>
            <returns>An App Portal Chrome Window that wraps the user control.</returns>
        </member>
        <member name="M:Bloomberglp.AppPortalApi.ChromeHelper.RegisterStartupArgs(System.String[])">
            <summary>
            Preprocesses application startup arguments 
            </summary>
            <param name="args">Startup arguments</param>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
